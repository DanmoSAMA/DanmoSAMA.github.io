<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020 and Half of 2021</title>
    <url>/2021/05/30/11.2020+2021%E4%B8%8A%E5%8D%8A%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="挣扎与彷徨"><a href="#挣扎与彷徨" class="headerlink" title="挣扎与彷徨"></a>挣扎与彷徨</h1><h2 id="高三之前"><a href="#高三之前" class="headerlink" title="高三之前"></a>高三之前</h2><p>高中的往事已回忆数次，无非就是这样的开局：不自信/想要变强→怀抱着不切实际要当科学家的妄想→逼迫自己，强迫症/形体化→后悔，无力改变现状。那个时候，基本是个人我都会感到羡慕，我沉沦于无止境的痛苦之中，每天都感觉过得浑浑噩噩，觉得自己的青春和人生就这么被强迫症给废掉了。不论我怎么努力，都感觉自己被限制住了，就是发挥不出来自己的能力，考试也极少进年级前50，比起我初中玩着考入班级前十，现在的我稳在班级前50%都困难。</p>
<p>现在觉得一切不过都是借口，强迫症也并没有那么可怕，虽然它让我的生活变得不太舒服，形体化的后患仍然存在，但并不影响我掌控自己的人生。当时成绩上不去，是我做了太多琐碎的事，摘抄或总结了很多笔记却很少复习且断断续续，自发刷题只坚持了英语，总之没有高效率地学习。顺带一提，这里提到的有些毛病我现在都还没有改掉。</p>
<p>在高二的时候其实我已经认识到（现在我都不知道这种认识是否正确），<strong>自己或许不能专精于任何一个方向</strong>，因为努力学习后也考不到年级顶尖水平。比起某方面的专精，我可能更适合成为全能型庸才（但其实这样我也做不到），所以当时就买了心理学、计算机、美学、音乐的书来看，还读了《混血豺王》和《比尔盖茨传》等。但是这一切在高三到来的时候就又被我抛掷脑后。</p>
<h2 id="疲于奔命"><a href="#疲于奔命" class="headerlink" title="疲于奔命"></a>疲于奔命</h2><p>高二暑假是我此生最短的暑假，短到只有两天。暑假前半段被迫参加每天200块的“名校通”，暑假后半段又要回去补课，回去前的一周我又自愿交钱补习化竞，顺带一提，后期到开学的这段时间我看完《钢之炼金术师》全套漫画。</p>
<p>那个时候，我看到了北大2020的招生简章，简章十分精美，花花绿绿，我们班上放了几本，于是我便热衷于阅读它。那个时候我被北大所深深吸引，开始幻想能不能考上，并且由于自己心态的困境，我特别想去心理学系。其实去不去心理学也无所谓，那时候我觉得读个考古都可以，反正是北大嘛。这样靠着专项计划，我还是得考到680分才可以，而我只有650分的水平，平时的模考只能考580~620区间。</p>
<p>我开始思考着自己如何达到这种“飞跃”，大概是一定要去找自己的节奏，有针对性地提分。前边还是比较顺利，在11月的一次模考中，我同时取得了语文（128，之后再也没达到过）和化学的双班级第一，年级31名，之后一次考试我坐在第一考场，考理综时心态突然崩溃，结果理综考了190，好状态完全止步于这次考试。于是我开始不听讲，不按着学校的复习进度来，自己整些笔记、刷题、网课，这些全都上了。但是随着时间的不断推移，我没觉得自己有什么进步，后边越来越过分。先是伪造病历去办了走读证，在学校旁边租了个小房间便于每天走读回去多学会，也方便刷网课。因为买的网课太多觉得刷不完，然后又跟班主任协商，翘掉四节晚自习。我开始觉得学校老师讲的啥用没有，平时的作业很多都在抄，觉得极其浪费时间，待在学校我都觉得痛苦，我把自己没有进步的错误都归咎于是学校限制了我。一轮复习结束，二轮复习开始，我觉得自己还是老样子。结果这段时间成绩不断下降，位次连着四五次都在一百名开外，老师也在找我谈话。</p>
<p>最后我还是下定决心回家复习去了，结果没走几天撞上疫情，大家都只能在家学习。在家期间我的神经十分紧绷，每天的平均时长在14个小时以上，基本每天就是6点多起床一直学到晚上11点多，除了过年有两三天偷了个懒，三个月没怎么变过。也算是刷完了学校的二轮资料和几本网课资料。但是我仍然觉得自己的学习没有太大起色，从三月起学校开始让学生印模考卷做，我仍然只能考620左右，此时心态十分炸裂，后悔却又无可奈何，那个时候平均两天就会改一次qq签名，正能量的鸡汤背后是深深的负能量。我反思前面做的这一切，终于承认了自己就是普通人的事实，为何要追求680这一虚无缥缈的目标，就这样舒舒服服地苟着不就好了吗？</p>
<h2 id="回归正常"><a href="#回归正常" class="headerlink" title="回归正常"></a>回归正常</h2><p>4月回到学校后我就开始佛系了，不再想着自己去做些什么，而是按部就班地跟着学校。回来的第一次模考，我在数学113血崩的情况下考了年级36，惊艳了一些同学。接下来的一次考试又到了100多名，然后又考了43名，之后就回到以前的段位，考60名左右的水平。事实证明，回家学习的这段时间我大概就物理有了进步，最头疼的数学还是老样子。进步最明显的是心态，我开始没那么在意高考，而且开始对现状持接纳态度，珍惜毕业前的日子。我会趁着晚上走读便利，和同学去吃华莱士、克莱堡、烧烤，甚至有一天住到他家里。考前两周我为全班同学吹奏《追梦赤子心》，高考完我回去给一位尊敬的老师吹奏《离歌》，弥补了高二的一次遗憾。</p>
<p>那段时间，我也常思考未来，不再去追求一时脑热的化学和心理学专业，觉得作为一个普通人就学个计算机专业，到时候出来工作挣钱就行了。看知乎推荐觉得北邮是一所不错的学校，因为就业率非常高，华科也可以，有“北北邮，南华科”之称。我给自己的计算机专业学校排名是：浙大→北航→华科→北邮→西电/西工。虽然佛系，高考我仍旧全力以赴，最后655收场，语文数学略炸，英语正常，理综略超常，总分是正常水平。周围不少平时一般的同学考到了670+，确实还是有点点不甘心吧。</p>
<p>报志愿的时候，这个分数在我省提前批次确实可以冲一冲华科，往年最高分数是656。但是华科CS给的名额很少，又是热门专业，所以心里没底。就这样，提前批我填了华科（只写了三个专业，还不服从调剂，事后后悔了，因为这不是稳进CS的方案），本一批填了北邮。其实这个分数挺合适的，分低一些我会进入华科非CS专业（光电/能动），分高一点（&gt;660）我说不定会冲进浙大的差专业。最后，事实证明我的担心多余，顺利来到华科CS。从结果上看，我的高考是比较顺利的。</p>
<h2 id="一晃而过的暑假"><a href="#一晃而过的暑假" class="headerlink" title="一晃而过的暑假"></a>一晃而过的暑假</h2><p>暑假开始做一些自己想做的事了，比如说学完标日上下册，还背了一些日语单词；口琴继续练；本来说要做视频，还是没有去学，懂了Pr基本操作，在9月初才剪了一个自己勉强满意的视频；骑车上国道，玩了一天多。</p>
<p>知道自己被华科CS录取后，我又开始“蠢蠢欲动”了，因为本质上我不是一个甘于平庸的人。因为高中的“难忘”经历，我果断地认定卷加权不是适合自己的道路，如何把大学生活过得丰富且有意义，是我最为注重的。早在高考之前，我就听说过华科的“三大团队”，抛开一些功利性的东西不谈，单是出于向往“互联网大学”，我就很想加入。于是我加入了秋招群，在自己并不清楚想要选什么方向的情况下，开始准备冲击联创Lab组，至于为什么是Lab，因为Lab的学习指南里有C，在看到招新信息的时候我已经学了一周的C，不想浪费基础（现在看起来有点可笑）。于是暑假的后半段我每天抽很多时间去看C、Linux，但是都是刷视频且浮光掠影；试着啃了一下黑皮《计算机科学导论》，每天刷个十几二十页，也感觉很难吸收其中的知识，看后就忘。</p>
<p><strong>从这里我开始产生一个矛盾：自己有明确想要学的东西（日语、口琴、视频），但是因为我有别的东西要追求，所以没时间做自己喜欢的事。要做的事多和有限的精力之间产生了不可调和的矛盾。</strong>现在思考一下我想加入团队的原因，无非：①因为高中怎么学都考不进年级前列，对卷加权这件事没有信心，想建立自己在其他方向的优势；②不想继续卷，觉得团队能带来有意义和丰富的生活。其他原因都能归咎于这两点上——想变强/想过不同的生活。</p>
<p>但是要加入团队，又不得不经历一个卷的过程，要努力卷进团队，就没有时间去做自己想做的事了。</p>
<h1 id="步入大学"><a href="#步入大学" class="headerlink" title="步入大学"></a>步入大学</h1><h2 id="确定方向"><a href="#确定方向" class="headerlink" title="确定方向"></a>确定方向</h2><p>来华科以后，新鲜感很快就过去，由于疫情，军训只持续了不到两星期，最后一天坐在潮湿的地面导致我感冒了。这段时间最重要的事就是冲击团队。我同时报名了冰岩、联创和Dian，最开始招新的是冰岩，根据我学习的内容，我选择了程序组。</p>
<p>那个时候我的基础，就是C语言能写<code>printf</code>和<code>if</code>、<code>for</code>循环的程度，连指针和数组都不会用。是的，美其名曰我暑假自学了C语言，其实就是刷视频，而且还没刷到指针，自己的代码能力几乎为0。Linux知道一些如<code>ls</code>、<code>cd</code>、<code>pwd</code>等的常用指令，自己配好了Vmware虚拟机。还稍微看了一点HTML和Python，但是几乎不会用。我还记得自己当时报名信息里吹得天花乱坠，把会的东西全部展开说，达到凑字数的目的，显得这个人很厉害。笔试时拿到题目，我几乎完全懵逼，但是还是硬生生的都编上去了，所有代码题和程序设计题都不会，就强行整个思路上去。最后笔试通过，国庆那天去了1006面试，为了试图作出“努力”的样子，我中午不到1点就到了，然后坐在那里为面试复习，拿起黑皮《计算机科学导论》，但是说实话什么都看不进去。那边有一两个学长学姐，我也不知道怎么跟他们寒暄。我当时思路清奇，走过去跟lyt学长说：“虽然笔试题我都不会，但我还是尽了最大努力去编答案”，似乎是想体现自己的顽强意志，结果得到了“不是给时间学了吗”的回复。然后面试开始，自我介绍，然后谈了自己会的东西，我刻意强调了自己会的都是很简单的皮毛。最后lyt学长问到如何用Python来把一个字符串逆序，我自然是承认自己不会。我最后还不忘补了一刀“我也存在一些同学在群里说的问题，就是像高中一样啃书学习，缺乏实践”。面试自然而然是被挂掉了。我认识到了自己的菜，所以后边的联创和Dian就鸽了（指连笔试题都没有做）。</p>
<p>当时我觉得，程序组的题目这么难，我自学一学期后端应该也进不了组，而且我高中数学就不是很好，编程可能比不过一些大佬，还是选一个大家都是零基础的、好入门的方向吧。那时候就在知乎上搜，发现前端学习路线非常明确，好像比较简单，加之我之前有一点点HTML的基础，觉得努力学一学期应该可以冲一冲团队，于是我就立刻决定学前端。那时真的是特别想去团队，不去想自己到底热爱什么，想的是什么方向适合我冲击团队。</p>
<p><strong>其实大学四年的时间很长，完全可以什么方向都学一些，再看看自己到底喜欢什么方向；或许自己不适合搞开发，那么就应该去读研。但我的决定就是做得这么快。</strong></p>
<h2 id="生活与学习"><a href="#生活与学习" class="headerlink" title="生活与学习"></a>生活与学习</h2><p>我的大学，从一开始就放弃参加内卷游戏，选择冲击团队之路后，我还希望自己的生活过得丰富一些。于是加入了车协，去骑东湖、骑八分山、骑到武大。武大百团的时候，我还加入了樱之音口琴社（虽然加入后从没参加过活动）。</p>
<p>不知怎么，现在的我已经没法沉下心来玩很长时间的游戏了，玩的时间一长就会导致做别的事情的时间变少，内心就会产生焦虑。其实我一点也不喜欢这样，初中那时一日十来个小时的游戏生活已经彻底远去。其他时间，就是看一看动漫，比起新番，我倾向于老的经典番剧，名作之壁。暑假看了凉宫、石头门、强风吹拂、排球、轻音、京吹，开学后继续看巨人、狼辛，后来又看了钢炼03、小圆、天元、Fate…</p>
<p>然后谈谈学习吧，为了抽出来更多时间来学技术，学校排的课我都疯狂水过，还翘了不少课。平时简单自学一下，做作业都是面向答案，考前再突击一下，第一学期除了期中线代挂掉，其他的科目都还能看，总加权也算混进了前50%，自己还是比较满意的。</p>
<p>但是技术学习，我还存在很多问题。首先我学习主要靠看视频（视频比较系统，看完了可以大概知道一个东西怎么做），而且对于100多集的视频，我一天也就看3~6集，所以学起来的速度非常慢，学完了还缺乏实践。于是就这样，我花了三个多月才完三剑客基础+Markdown，这种学习速度让我变得更加自卑，我不停地安慰自己：“不可心急，日积月累”。我想冲团队的愿望也影响了寝室的氛围，大家或多或少都在学习技术上的东西。</p>
<p>还有一件不愿提及但是不得不提的事就是摔牙，那时候我也抑郁了一阵子，觉得自己不能啃东西了什么的，但是时间可以冲淡悲伤，现在的我也逐渐接纳了这件事。</p>
<h2 id="忙碌的寒假"><a href="#忙碌的寒假" class="headerlink" title="忙碌的寒假"></a>忙碌的寒假</h2><p>我把寒假当作自己冲击冰岩的关键期，所以依然努力学习前端技术。我深入了一些JS，照着冰岩往年的笔试题来补充知识点，看了不少博客，最后觉得自己的实践能力不足，所以又复刻了一些页面。</p>
<p>因为团队是鞭策我学习的重要因素，有时候我会上网搜索信息，读完以后我就会动力十足，继续学习。一次在Github上搜索冰岩，找到了以前夏令营开的仓库，以此我了解到了gc学姐，一次问她js问题的时候，她向我发了一篇博客，是xiong35学长的。当时我就觉得学长很强，这激励了我花了三天时间，去搞了一个WP博客。然后我也加了学长的好友，稍微聊了一些后他鼓励了我，说我春招很有希望进入冰岩。当时的我，确实也有了一些进入冰岩的自信。</p>
<h2 id="冲冰岩失败"><a href="#冲冰岩失败" class="headerlink" title="冲冰岩失败"></a>冲冰岩失败</h2><p>开学以后，我一直期盼着冰岩的招新信息。这段时间我继续完成寒假的项目，以及看博客补充新的知识。很快招新就来了，因为心里激动，简历我是改了又改，最后我作了个大死，说自己搜冰岩的信息，想借此体现自己的热爱。殊不知，这是给自己挖了个天大的坑。我以为秋招面试被挂能带来一些教训，结果春招时我情商还是老样子。</p>
<p>就这样我一路杀过简历、面试，实习选题时，我不敢给自己选太难的，就还是老老实实复刻网页。因为实习只能通过很少的人，而实习名单里好像有实力很强的大二学长，我就还是不自信。实习期我疯狂翘课抄作业，硬是把所有Level基本完成了，展示时我想让自己说得更有条理一些，于是准备了稿子（作死*2），展示完后我觉得自己稳了。</p>
<p>然后就到了组面，在门外，我开始在脑海中构思着自我介绍。我一进门气氛就冷到冰点，然后就是我自顾自地说了很多（作死*3），接着被xiong35学长问到查资料的事，我也没有作出很好的解释。之后面试官问我还有没有什么问题，我反向让他们继续问我，结果被问到了答不上来的问题，场面继续尴尬。后面结局基本就注定了，组面没有通过。</p>
<h2 id="继续迷茫"><a href="#继续迷茫" class="headerlink" title="继续迷茫"></a>继续迷茫</h2><p>组面结束后的那个下午，我就不带手机绕着主校区走了一圈，以排解心中的苦闷。后来我的舍友A通过了冰岩程序组的考核，舍友B通过了Dian的考核。当时最想进入团队的我就这样落败，而他们怀着试一试的心态参与，就这样顺利进入了，一点都不羡慕是不可能的。</p>
<p>后来xiong35学长找我谈，说我技术很强，但是因为如上列举的原因没有让我通过，自己的风格和团队不符，让我找到适合自己的组织。后来我又联系了欧阳学姐，她说我“痴迷于技术”，“有种理工男呆呆的感觉”，“像个geek”，“忽略了一些情商方面的东西”（当然，我从来不认为自己像个Geek，因为Geek这个词给我一种很强的感觉，后来HackDay的队友也认为我完全不像是geek）。</p>
<p>我开始迷茫了，竟然在技术过关的情况下，因为别的因素被团队挂掉，我不太能接受这个结局。而且说我技术很强，那个时候我还真的相信了，开始考虑换方向，甚至是读研——毕竟学习能力强嘛，又何必局限于“简单”的前端。但是我技术真的强吗，也不强。学了五六个月还是这么点水平。想想xiong35学长充沛的精力和很强的学习能力，从零开始40天就能写博客的前后端，我就觉得自己什么都算不上。最后我还是继续学前端，不想浪费基础，而且还可以继续冲击团队。</p>
<p>可是说实话，我真的喜欢前端吗？不喜欢也不讨厌吧，遇到Bug会抓耳挠腮十分难受，可是解决问题时也会有巨大的成就感。写出赏心悦目的页面也可以给我带来正向反馈，但是也就仅仅是网页而已。现在我最需要的，大概就是要做出一个产品吧？一直孤立地自学，啃厚厚的书籍却什么也不做，又有何乐趣可言呢？总之，我目前还像是停留在“为了学习而学习，为了团队而学习”，而不是“为了需求而学习，一边实践一边学习”。</p>
<p>这学期的课内学习要比上学期拉跨了，一来是课业明显变得繁重，二是难度开始加大。我的态度也比上学期要松懈了许多，作业中有很多没有搞懂的内容，考试前复习得也不充分，就这样，我的微积分期中考试直接挂科。以后必须要改善学习方法了，不想投入时间又不想挂科的话，必须要依赖网上的“速成课”，或者慕课。</p>
<p>现在的我，还是想先坚持前端的路线，体验一下开发到底是什么感觉，后续作出的决定，很大程度上与我有没有进入团队有关。之前我想的是本科毕业就去投前端岗，去大厂996，但是最好还是读一下研究生，去外企955吧。</p>
<p>希望HackDay和暑假的夏令营能带来一些转变吧。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以下记录HackDay经历和带来的一些转变：</p>
<p>那是一节国际金融公选课，抄完大物答案百无聊赖的我打开了微信，看见了联创的最新推文——HackDay Reboot。其实这种比赛，我一般是不敢去想的——奖金丰厚、大佬云集，既然标榜是“极客狂欢”，和我这样的蒟蒻又有什么关系呢。但最后思量着，6月14日结束后应该来得及备考期末，况且可以学到不少东西，我还是决定报名。</p>
<p>进入FAQ群后，我本来决定报名后到现场组队，令我没有想到的是，一个冰岩的同学邀请我加入他们。最后三个冰岩人和我这个野路子组成了“启明好难队”。既然和冰岩同学组队了，我就不敢掉以轻心，生怕拖了他们的后腿。</p>
<p>我开始做知乎的项目练习前后端交互，开始写移动端，学了swiper插件（用于移动端滑动页面），由于发现原生JS的效率实在不高，在参加比赛的前一晚我入门了JQuery。</p>
<p>6月13日很快到来，我们先是在报告厅举办了开幕式，然后来到12楼，我被满眼的饮料和零食惊到了，没见过这种大场面。我们之前储备的idea押到了今年的关键字“择”，于是每个人就开始各搞各的，详细比赛过程就不多言。白嫖蒸功夫、披萨、小龙虾、K记的感觉真是太爽了，明年还来。</p>
<p>这次比赛印证了一点——我的技术确实存在短板，思维也常常跟不上，很多需求没做出来，设计的图也只用到一张。后端帮助了我很多，包括熬夜一整晚帮忙理清部分JS逻辑（惭愧）。命悬一刻的时候，都是后端救了我。没有我的队友，真的连阉割版产品都拿不出来。<br>一轮筛选的嘉宾有思否CEO高阳，有幸通过一轮筛选进入二轮，虽然最终没有获奖，但是已经很满意了。</p>
<p>顺带一提，同房间的大佬做的游戏实在牛逼（Re0从零开始的HUST生活），现场效果爆炸，拔得头筹。听到他们的商量和激烈的辩论，我发现，原来这就是Geek，他们对编程的热爱，是溢于言表的，即便是旁人也能深受感染，不像我遇到Bug时的萎靡无力。</p>
<p>经过HackDay，我认识到，学习编程是为了兴趣而非为了团队，真正的Geek用编程改变世界。几个月以来，在加入团队的室友和我侃侃而谈，以及和冰岩同学组队参加比赛之后，我愈来愈觉得，<strong>加入团队也并非我以前所以为的那样光鲜亮丽，团队人≠人上人。抬高对方，疯狂自贬的行为是错误的。</strong></p>
<p>看见大佬开发游戏的时候，我对游戏开发也产生了一定的兴趣，遂希望以后可以学一些框架去开发网页游戏。并且我认为，只是写网页确实有些普通，尝试客户端APP的开发也是一条可行之路。前端追求的是炫酷的特效和优秀的用户体验，我觉得也不错。当下先继续打好前端基础，<strong>不要把加入团队当作自己前进的动力</strong>，要因为喜欢，所以才用汗水浇灌它，哪怕最终什么团队都没加入，自己也可以在沁苑一隅发光发热。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>口琴谱</title>
    <url>/2021/08/04/23.%E5%8F%A3%E7%90%B4%E8%B0%B1/</url>
    <content><![CDATA[<p>谱子来源于b站/je吧</p>
<h1 id="美丽之物"><a href="#美丽之物" class="headerlink" title="美丽之物"></a>美丽之物</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#4  7  #【1】</span><br><span class="line">【2】  #【1】  7  6 #4</span><br><span class="line">#4  3  2  3  6 #4</span><br><span class="line">7  #【1】  【2】  #【1】  7  6 #4</span><br><span class="line">#4  3  2  3  2  2</span><br><span class="line">7  #【1】  【2】  #【1】  7  6  #4</span><br><span class="line">#4  3  2  3  6  #4</span><br><span class="line">#4  3  2  3  6  #4</span><br><span class="line">#4  3  2  3  2  2</span><br><span class="line"></span><br><span class="line">【4 3 2 1】6 </span><br><span class="line">5 4 5 【1】  6</span><br><span class="line">【2 3 4 3 2 1】6</span><br><span class="line">5 4 5 4  4</span><br><span class="line">【2 3 4 3 2 1】6</span><br><span class="line">5 4 5 【1】  6</span><br><span class="line">5 4 5 【1】  6</span><br><span class="line">5 4 5 4  4</span><br><span class="line">【2  1  】 #66 #66#6【12  1  】</span><br><span class="line">【2 1】#6 655 6</span><br><span class="line"></span><br><span class="line">6  6 6 6 7 5  #4  3</span><br><span class="line">3 3  #4  5 #4  3  2</span><br><span class="line">(7) #1  2  #4 3  2  3</span><br><span class="line">2  3  #4  5  6</span><br><span class="line">6  6  7 5  #4  3</span><br><span class="line">3  #4  6 3  2  2</span><br><span class="line">(7) #1  2  #4 3  2  3</span><br><span class="line">6  6 6  7 5  #4  3</span><br><span class="line">3  #4  5 #4  3  2</span><br><span class="line">(7) #1  2  #4 3  2  3</span><br><span class="line">2  3  #4  5  6</span><br><span class="line">6  6  7 5  #4  3</span><br><span class="line">3  #4  【2】 #【1】  6  #4</span><br><span class="line">2  3  #4</span><br><span class="line">5  #4  3 3</span><br><span class="line">2  3  4  5  6</span><br><span class="line">5  6  【1】  【1】  5  5</span><br><span class="line">6  5  4</span><br><span class="line">4  5  4  3  2  2  1</span><br><span class="line">7 7  7  6 7  #【1】  【2】</span><br><span class="line">#【1】 #【1】  #【1】  7 #【1】  7 6</span><br><span class="line">(7)  1  2  3  #4  5  6</span><br><span class="line">#4  #6  7  #【1】</span><br><span class="line">【2】  #【1】  7  6 #4</span><br><span class="line">#4  3  2  3  6  #4</span><br><span class="line">#4  7  #【1】  【2】  #【1】  7  6 #4</span><br><span class="line">#4  3  2  3  2  2</span><br><span class="line">7  #【1】  【2】  #【1】  7  6 #4</span><br><span class="line">#4  3  2  3  6  #4</span><br><span class="line">#4  3  2  3  6  #4</span><br><span class="line">#4  3  2  3  2  2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="起风了"><a href="#起风了" class="headerlink" title="起风了"></a>起风了</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(#5)(#4)(#5)(#4)(#5)(#6)#1(#6)</span><br><span class="line">(#5)(#4)(#5)(#4)(#5)(#6)(#5)(#4#1)</span><br><span class="line">(#5)(#4)(#5)(#4)(#5)(#6)#1(#6) (#5)(#6)(#5)(#4)(#5)</span><br><span class="line">(#5)(#4)(#5)(#4)(#5)(#6)#1(#6) (#5)(#6)(#5)(#4#2)</span><br><span class="line">(#6)(#5)(#4)(#5)(#4) (#6)(#5)(#4)(#5)(#4)</span><br><span class="line">(#6)(#5)(#4)(#5)(#4)</span><br><span class="line"></span><br><span class="line">(#4)(#5)(#6)(#4) #2#1#2（#4）#3#2#3</span><br><span class="line">#3#2#3 (#6)#4#5#4#3#2#1</span><br><span class="line">#1#2#1#2#1#2#1(#5)#1(#6)</span><br><span class="line">(#4)(#5)(#6)(#4) #2#1#2（#4）#3#2#3</span><br><span class="line">#3#2#3 (#6)#4#5#4#3#2#1</span><br><span class="line">#1#2#6#6 #1#2#6#6#1#2#2</span><br><span class="line"></span><br><span class="line">#4#5#6 【#2】【#1】 【#2】【#1】 【#2】【#1】</span><br><span class="line">#5#6 【#2】【#1】 【#2】【#1】 【#2】【#1】#6</span><br><span class="line">#5#4#2#4 #4#5#4#2#4#67#6#5#6#5</span><br><span class="line">#4#5#6 【#2】【#1】 【#2】【#1】 【#2】【#1】</span><br><span class="line">#5#6 【#2】【#1】 【#2】【#1】 【#2】【#1】#6</span><br><span class="line">#5#4#2#6 #5#4#2#4#4</span><br><span class="line">#2#6 #5#4#2 #6#5#4#2 #4#4</span><br><span class="line"></span><br><span class="line">间奏：</span><br><span class="line">#1 #4 #5 #6 #1【#1】  #6</span><br><span class="line"> #3#4 #5 #6  #1【#1】  #6</span><br><span class="line"> #6【#1】 #5 6 #5#4#2#4</span><br><span class="line">(#6)(7)(#6) #1 #2(#6)(#5) &#123;#4&#125; &#123;#2&#125; &#123;#4&#125;(#6)</span><br><span class="line">(#6)(#6) (#2) (#6)(#6) (#2)</span><br><span class="line">(#6)(#6)#2#1#2</span><br><span class="line">【#1 】#6 #5#4#2#1(#6)(#5) (#4) (#2) (#1) (#2) (#4)</span><br><span class="line"> (#3) (#4)(#5)(#6)#2#1(7)(#6) (#3) (#4) #1</span><br><span class="line"> </span><br><span class="line">尾音：</span><br><span class="line">#2#1(#6)   #2#1(#6)#1   #2#1(#6)</span><br></pre></td></tr></table></figure>

<h1 id="to-the-beginning"><a href="#to-the-beginning" class="headerlink" title="to the beginning"></a>to the beginning</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#4#4#3#4 #2#5#6 [#1#1#1#1]</span><br><span class="line"></span><br><span class="line">12#25 [#22#22]#6 </span><br><span class="line">#6#55#2#3#6#55 7[12]</span><br><span class="line">[12#2]#7[#3#22]#6 </span><br><span class="line">#6#5#6#7[2]#6[431]5</span><br><span class="line">-------------------------------------- </span><br><span class="line">11123(77) 1(76) 121233 </span><br><span class="line">11123(77) 1(76) 12(7)2#1#1  </span><br><span class="line">23444 6677 333 5566  </span><br><span class="line">432 436#54433 5435 </span><br><span class="line">666[1122] 55577[11]</span><br><span class="line">4323 6456 #567</span><br><span class="line"></span><br><span class="line">66#566 #4#56[#1#122] </span><br><span class="line">[#1]6[#1#122] [#1]7[2#1#1] 676#576</span><br><span class="line">6#56 #4#56[#1#122] </span><br><span class="line">[#1]6[#1#122] [#1]7[2#1#1] </span><br><span class="line">76#57766 [3]#5#5 </span><br><span class="line"></span><br><span class="line">11123(77) (6) 12 24 43 </span><br><span class="line">11123(77) 1(76) 12(7)23#1  </span><br><span class="line">444 6677 333 5566 </span><br><span class="line">432 436#54433 5435 </span><br><span class="line">666[1122] 55577[11] </span><br><span class="line">4466#5676</span><br><span class="line"></span><br><span class="line">332#133  676#5766  </span><br><span class="line">332#132  (7)#122#1#1 </span><br><span class="line">33(66)36 33(66)36  </span><br><span class="line">#5#5#4#3#4#5 6[#1]#53</span><br><span class="line">55115[111]76  7[122]66 677</span><br><span class="line">66#56 #4#56[#1#122] </span><br><span class="line">[#1]6[#1#122] [#1]7[2#1#1] 676#576  </span><br><span class="line">6#56 #4#56[#1#122] [#1]6[#1#122] </span><br><span class="line">[#1]7[2#1#1] 76#5766 </span><br><span class="line">#5#43#5#4#4 #4#4#5#5 #6#6</span><br></pre></td></tr></table></figure>

<h1 id="king"><a href="#king" class="headerlink" title="king"></a>king</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 5#44#221 12#24#4 5</span><br><span class="line">1 5#44#221 （7）1（7）1（7）</span><br><span class="line">1 5#44#221 12#24#4 5</span><br><span class="line">1 5#44#221 （7）1（7）1（7）</span><br><span class="line"></span><br><span class="line">5#755 4#2#55</span><br><span class="line">#2#3（#6#6 #6#65#6#7）</span><br><span class="line">5【1】 5【#2】 #3#2#55</span><br><span class="line">#2#3（#6#6  #6#65#6#7）</span><br><span class="line"></span><br><span class="line">#25#2 555#2555#554#2</span><br><span class="line">#25#2 555#25554#22（#6）</span><br><span class="line">#25#2 555#2555#554#2</span><br><span class="line">#25#25#25#5  757【21】</span><br><span class="line"></span><br><span class="line">5#2555#2555#554#2</span><br><span class="line">5#2555#2555#5#6545</span><br><span class="line">5#2555#2555#554#2</span><br><span class="line">5#2555#5 757【2】</span><br><span class="line"></span><br><span class="line">【#21#21 #3#2#35#3#21】</span><br><span class="line">【111】#6【12#221】</span><br><span class="line">【#21#21 #3#2#35#3#21 111】</span><br><span class="line">77</span><br><span class="line">【#221】</span><br><span class="line">【#221】</span><br></pre></td></tr></table></figure>

<h1 id="夜に駆ける"><a href="#夜に駆ける" class="headerlink" title="夜に駆ける"></a>夜に駆ける</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5#6#7#554 #2#3#7#6【1】5#3#2</span><br><span class="line">5#6#7#554 【2】#7#6#6#7【2#2】 5#3#2</span><br><span class="line"></span><br><span class="line">(#7)2#22 (#65#6#7)</span><br><span class="line">(#6#6#7)#2#35(#6#7)54#6#5#55</span><br><span class="line">5#7#654 #2(#7)#2(#7)#24 #2252(#6#7)</span><br><span class="line">(#7)2#2454 #222(#7#7)</span><br><span class="line">(#6#7)2#22 (#65#6#7)</span><br><span class="line">(#6#6#7)#2#6545#6#7#6545</span><br><span class="line">5#7#654 #2(#7)#2(#7)#24 #2252(#6#7)</span><br><span class="line">(#7)2#2454 #222(#7)</span><br><span class="line"></span><br><span class="line">(#6#6#6#7) #2(#7)#2(#7)#2</span><br><span class="line">15545 42(#6#6#7)</span><br><span class="line">5555#5#65 #2(#7)#2445 #2(#7)#2(#7)#245</span><br><span class="line">5#5#654#2</span><br><span class="line">(#7)#254#2#245754#2</span><br><span class="line">2(#6#7#6#7)2#245#55</span><br><span class="line"></span><br><span class="line">【#22】#6#6#754 #2#3#7#6#354#2</span><br><span class="line">#2#6#554#22#24#5545#7#6</span><br><span class="line">5#6#7#554 #2#3#7#6#75#3#2</span><br><span class="line">(#7)2#2(#7)#245#25#77</span><br><span class="line">#2#2【#22】#6#6#754  #2#3#7#6【1】5#3#2</span><br><span class="line">#2#6#554#22#24#5545#7#6</span><br><span class="line">5#6#7#554 【2】#7#6#6#7【2#2】 5#3#2</span><br><span class="line">1#2#55 #24#2</span><br><span class="line"></span><br><span class="line">(#7)2#22 (#65#6#7)</span><br><span class="line">(#6#6#7)#2#6545#6#7#6545</span><br><span class="line">5#7#654 #2(#7)#2(#7)#24 #2252(#6#7)</span><br><span class="line">(#7)2#2454 (#6#6#7)</span><br><span class="line"></span><br><span class="line">(#7#7#7)#2#2#2 #2#2#2#2</span><br><span class="line">#2#2#2#2#2 #2#2#2(#7)#2(#7)</span><br><span class="line">(#7#7#7#7)#2#2 #2#2#2#2</span><br><span class="line">#2#2 #2#2#2#2 #2#7#2(#7)#7#6</span><br><span class="line">#25#5#64#2 5#5#64#2</span><br><span class="line">5#5#64#2</span><br><span class="line">5#6#7#654#2 (#7)#2#5514#2</span><br><span class="line"></span><br><span class="line">#6#6#6#6#6 #6#6#5544#2</span><br><span class="line">(#7)#2#7#65#6511 545【#22】#65#6#7#654#2</span><br><span class="line">#6#6#6#6#6 #6#6#55#64#2</span><br><span class="line">(#7)#2#7#654#2(#7)#2#55#2(#7)#2</span><br><span class="line"></span><br><span class="line">(#5#6#6#7#7) #2(#7)#2(#7)#2</span><br><span class="line">15545 42(#6#6#7)</span><br><span class="line">5555#5#65 #2(#7)#2445 #2(#7)#2(#7)#245</span><br><span class="line">5#7#654#2(#7)#2(#7)#3</span><br><span class="line">#3#7#7#6#6#7#7#6545#2</span><br><span class="line">#245#215#2(#7)#2#7754#55</span><br><span class="line"></span><br><span class="line">【2#1】667#4323763#432</span><br><span class="line">265#432#1235#4 #4#476</span><br><span class="line">#4675#4323767#432</span><br><span class="line">(7)#12(7)23#42#47#67【#1】</span><br><span class="line"></span><br><span class="line">【43112】6545【212】654</span><br><span class="line">4【1】#6654345#6656【21】</span><br><span class="line">6【12】#66545【212】654</span><br><span class="line">234245646【2#1】</span><br><span class="line">44【43112】6545【212】654</span><br><span class="line">4【1】#6654345#6656【21】</span><br><span class="line">6【12】#665【3211234】#554</span><br><span class="line">24#66424</span><br><span class="line">1234【1】#66541454</span><br><span class="line">6【121】65424【21】624</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>口琴</category>
      </categories>
      <tags>
        <tag>口琴</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3笔记</title>
    <url>/2021/07/31/22.Vue3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h1><h2 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a>createApp</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载</span></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><p>使用vite创建工程的步骤（了解）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入工程目录</span></span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><ol>
<li>理解：setup是一个新的配置项，值为一个函数</li>
<li>setup是所有<code>Composition API</code>表演的舞台</li>
<li>组件中用到的数据方法等，都要配置在setup中</li>
<li>setup函数的两种返回值：<ol>
<li>若返回一个对象，则对象中的属性、方法，在模板中均可以直接使用</li>
<li>若返回一个渲染函数，则可以自定义渲染内容（了解）</li>
</ol>
</li>
<li>注意点：<ol>
<li>不要和Vue2.x配置混用<ul>
<li>2.x配置可以访问到setup中的属性和方法，但反过来不行</li>
<li>如果有重名，setup优先</li>
</ul>
</li>
<li>setup不能是async函数</li>
</ol>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;一个人的信息&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;sayHello&quot;&gt;说话(Vue3所配置的——sayHello)&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // import &#123;h&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    // 此处只是测试一下setup，暂时不考虑响应式的问题</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line"></span><br><span class="line">      // 方法</span><br><span class="line">      function sayHello()&#123;</span><br><span class="line">        alert(`我叫$&#123;name&#125;，我$&#123;age&#125;岁了，你好啊！`)</span><br><span class="line">      &#125;</span><br><span class="line">      // 返回一个对象（常用）</span><br><span class="line">      return &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        sayHello,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个函数（渲染函数）</span><br><span class="line">      // 它会覆盖模板中的内容，比如此处页面上只显示&lt;h1&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">      // return ()=&gt; h(&#x27;h1&#x27;,&#x27;尚硅谷&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul>
<li><p>作用：定义一个响应式的数据</p>
</li>
<li><p>语法：<code>const xxx = ref(initValue)</code></p>
<ul>
<li>创建一个包含响应式数据的引用对象（reference对象）</li>
<li>操作数据：<code>xxx.value</code></li>
<li>模板中读取数据不需要.value</li>
</ul>
</li>
<li><p>备注：</p>
<ul>
<li>接收数据类型：基本类型、对象类型</li>
<li>基本类型数据的响应式靠<code>Object.defineProperty()</code>的get和set完成</li>
<li>对象类型数据求助了<code>reactive</code>函数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//数据</span></span><br><span class="line">  <span class="keyword">let</span> name = ref(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> age = ref(<span class="number">18</span>)</span><br><span class="line">  <span class="keyword">let</span> job = ref(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>:<span class="string">&#x27;30K&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	name.value = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">  	age.value = <span class="number">48</span></span><br><span class="line">  	job.value.type = <span class="string">&#x27;UI设计师&#x27;</span></span><br><span class="line">  	job.value.salary = <span class="string">&#x27;60K&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      job,</span><br><span class="line">      changeInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul>
<li>作用：定义<strong>对象类型</strong>的响应式数据</li>
<li>语法：<code>const 代理对象 = reactive(源对象)</code>，接收一个对象（或数组），返回一个proxy对象</li>
<li>定义的响应式数据是“深层次的”（即便是对象的对象的属性，修改时也能实现响应式）</li>
<li>内部基于ES6的Proxy实现，通过代理对象操作元对象内部数据进行操作</li>
</ul>
<h2 id="响应式实现原理"><a href="#响应式实现原理" class="headerlink" title="响应式实现原理"></a>响应式实现原理</h2><h3 id="vue2-x"><a href="#vue2-x" class="headerlink" title="vue2.x"></a>vue2.x</h3><ul>
<li><p>原理：</p>
<ul>
<li>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）</li>
<li>数组类型：通过重写更新数组的一系列方法来实现拦截（对数组的变更方法进行了包裹，本节视频未提及）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  get () &#123;&#125;,</span><br><span class="line">  set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>存在问题</p>
<ul>
<li>新增属性、删除属性，页面不会更新</li>
<li>直接通过下标修改数组，界面不会自动更新</li>
</ul>
</li>
<li><p>一些解决策略：</p>
<ul>
<li>使用<code>$set()</code></li>
<li>引入Vue，使用<code>Vue.set()</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">addSex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 方法一</span></span><br><span class="line">    <span class="built_in">this</span>.$set(<span class="built_in">this</span>.person, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">    <span class="comment">// 方法二</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在外部 import Vue from &#x27;vue&#x27;</span></span><br><span class="line">    Vue.set(<span class="built_in">this</span>.person, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><ul>
<li>实现原理: <ul>
<li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p>
</li>
<li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p>
<ul>
<li>Reflect的好处：ECMA正尝试把越来越多的属性和方法从Object移植到Reflect上，Reflect的方法执行遇到错误时不会报错，而是将自身的返回值设置为false，在框架中，便于捕获错误</li>
</ul>
</li>
<li><p>MDN文档中描述的Proxy与Reflect：</p>
<ul>
<li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</li>
<li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h2><ul>
<li>从定义数据角度对比：<ul>
<li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li>
<li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li>
<li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：<ul>
<li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：<ul>
<li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong> <code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong> <code>.value</code>。</li>
<li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong> <code>.value</code>。</li>
<li> 一般使用reactive更多，把属性全部定义在对象中，把对象定义在data数据中，只用return data</li>
</ul>
</li>
</ul>
<h2 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h2><ul>
<li><p>setup执行的时机</p>
<ul>
<li>在beforeCreate之前执行一次，this是undefined。</li>
</ul>
</li>
<li><p>setup的参数</p>
<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>子组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;school&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>:[<span class="string">&#x27;hello&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,props)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,context)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,context.attrs) <span class="comment">//相当与Vue2中的$attrs</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,context.emit)  <span class="comment">//触发自定义事件的。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,context.slots) <span class="comment">//插槽</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">let</span> person = reactive(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      context.emit(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">      test</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Demo @hello=&quot;showHelloMsg&quot; msg=&quot;你好啊&quot; school=&quot;尚硅谷&quot;&gt;</span><br><span class="line">    &lt;template v-slot:qwe&gt;</span><br><span class="line">      &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!--由于兼容性问题，命名插槽使用 v-slot:插槽名 的形式--&gt;</span><br><span class="line">    &lt;template v-slot:asd&gt;</span><br><span class="line">      &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Demo&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li><p>与Vue2.x中computed配置功能一致</p>
</li>
<li><p>写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">//计算属性——简写(没有考虑计算属性被修改的情况)</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul>
<li><p>与Vue2.x中watch配置功能一致</p>
</li>
<li><p>两个“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> msg = ref(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> person = reactive(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">job</span>:&#123;</span><br><span class="line">    <span class="attr">j1</span>:&#123;</span><br><span class="line">      <span class="attr">salary</span>:<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>person.job,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;person的job/name变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="watch时value的问题"><a href="#watch时value的问题" class="headerlink" title="watch时value的问题"></a>watch时value的问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> msg = ref(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> person = ref(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">job</span>:&#123;</span><br><span class="line">      <span class="attr">j1</span>:&#123;</span><br><span class="line">        <span class="attr">salary</span>:<span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通类型数据，不能.value</span></span><br><span class="line">  watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sum的值变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象类型数据二选一：</span></span><br><span class="line">  <span class="comment">//    1. person.value（它是一个proxy对象）</span></span><br><span class="line">  <span class="comment">//    2. 第一个参数不.value，开启深度监视</span></span><br><span class="line">  watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的值变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sum,</span><br><span class="line">    msg,</span><br><span class="line">    person</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><ul>
<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>
</li>
<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>
</li>
<li><p>watchEffect有点像computed：</p>
<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" style="zoom:80%;">

<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>
<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>
<li><code>created</code>===&gt;<code>setup()</code></li>
<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>===&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> ===&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> ===&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> ===&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>)</span><br><span class="line">  <span class="comment">//数据</span></span><br><span class="line">  <span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过组合式API的形式去使用生命周期钩子</span></span><br><span class="line">  onBeforeMount(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeMount---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onMounted---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeUpdate---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onUpdated---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeUnmount---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;---onUnmounted---&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;sum&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h2><ul>
<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>
</li>
<li><p>类似于vue2.x中的mixin。</p>
</li>
<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
</li>
</ul>
<h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul>
<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。这样在template中，可以少写’点儿’</li>
<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>
<li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li>
</ul>
<ul>
<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;person&#125;&#125;&lt;/h4&gt;</span><br><span class="line">  &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;薪资：&#123;&#123;job.j1.salary&#125;&#125;K&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;name+=&#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;age++&quot;&gt;增长年龄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;job.j1.salary++&quot;&gt;涨薪&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive,toRef,toRefs&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Demo&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      let person = reactive(&#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        job:&#123;</span><br><span class="line">          j1:&#123;</span><br><span class="line">            salary:20</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        person,</span><br><span class="line">        // name:toRef(person,&#x27;name&#x27;),</span><br><span class="line">        // age:toRef(person,&#x27;age&#x27;),</span><br><span class="line">        // salary:toRef(person.job.j1,&#x27;salary&#x27;),</span><br><span class="line">        ...toRefs(person) // 只能拿到job，j1和salary仍需要&#x27;点儿&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul>
<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>
</li>
<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
</li>
<li><p>什么时候使用?</p>
<ul>
<li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>
<li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>
</ul>
</li>
</ul>
<h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据被修改时。</li>
</ul>
<h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul>
<li>toRaw：<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。（person原先没有car属性，点击按钮添加car属性，并且直接对其markRaw，这样car属性以后就不会再成为响应式对象了）</li>
<li>应用场景:<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：这种方式会修改数据，只是页面上没有响应式；readonly连数据都无法修改</p>
</blockquote>
<h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><ul>
<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>
</li>
<li><p>实现防抖效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Demo&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      //自定义一个myRef</span><br><span class="line">      function myRef(value,delay)&#123;</span><br><span class="line">        let timer</span><br><span class="line">        //通过customRef去实现自定义</span><br><span class="line">        return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">              track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">              return value</span><br><span class="line">            &#125;,</span><br><span class="line">            set(newValue)&#123;</span><br><span class="line">              clearTimeout(timer)</span><br><span class="line">              timer = setTimeout(()=&gt;&#123;</span><br><span class="line">                value = newValue</span><br><span class="line">                trigger() //告诉Vue去更新界面</span><br><span class="line">              &#125;,delay)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">      return &#123;</span><br><span class="line">        keyword</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px">

<ul>
<li><p>作用：实现<strong style="color:#DD5145">祖先与后代组件间</strong>通信</p>
</li>
<li><p>套路：祖先组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li><p>具体写法：</p>
<ol>
<li><p>祖先组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>后代组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Dive with Evan You</title>
    <url>/2021/07/22/21.Deep%20Live%20with%20Evan%20You/</url>
    <content><![CDATA[<h1 id="render，h的传参"><a href="#render，h的传参" class="headerlink" title="render，h的传参"></a>render，h的传参</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>除了template，还可以为组件提供render函数，h（helper）作为渲染函数的参数，可以创造vnode，而mount可以把vnode挂载为真实dom结点</p>
<p>vnode接收的三个参数：</p>
<ol>
<li><p>类型，如’div’</p>
</li>
<li><p>对象，包含vnode上的所有数据、属性…</p>
</li>
<li><p>子结点</p>
<ul>
<li>直接传递一个字符串，如’hello’，表明这是一个文本子结点</li>
<li>也可传递一个包含更多子结点的数组，嵌套更多的嵌套的h调用</li>
</ul>
</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.mt-4</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.my-nav</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Stack</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Stack</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Stack</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123; h, createApp &#125; = Vue;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Stack = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> slot = <span class="built_in">this</span>.$slots.default</span></span><br><span class="line"><span class="javascript">        ? <span class="built_in">this</span>.$slots.default()</span></span><br><span class="line"><span class="javascript">        : []</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 尤大的例子，使用了插槽：</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;stack&#x27;</span> &#125;, slot.map(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 对Stack里的每一个子元素，都套上一层div，class为mt-4</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在这个div中，把原先的子元素重复三次，再放进去</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">`mt-<span class="subst">$&#123;<span class="built_in">this</span>.$attrs.size&#125;</span>`</span>&#125;, [</span></span><br><span class="line"><span class="javascript">          child, child, child, </span></span><br><span class="line"><span class="javascript">        ])</span></span><br><span class="line"><span class="javascript">      &#125;))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// return里使用vnode的三个参数：</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, [</span></span><br><span class="line"><span class="javascript">        h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, <span class="string">&#x27;This is my nav 0&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, [</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;This is my nav 1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, <span class="string">&#x27;This is my nav 2&#x27;</span>),</span></span><br><span class="line"><span class="javascript">          h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, <span class="string">&#x27;This is my nav 3&#x27;</span>),</span></span><br><span class="line"><span class="javascript">          h(<span class="string">&#x27;nav&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;my-nav&#x27;</span>&#125;, <span class="string">&#x27;This is my nav 4&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        ]),</span></span><br><span class="line"><span class="javascript">      ])</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> App = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      Stack</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 此处不提供template选项，则默认使用dom内模板，即上方的html</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="h的实现"><a href="#h的实现" class="headerlink" title="h的实现"></a>h的实现</h1><p>h函数的实现很简单，仅仅是把三个参数放入一个对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">tag, props, children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    props,</span><br><span class="line">    children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="mount的实现"><a href="#mount的实现" class="headerlink" title="mount的实现"></a>mount的实现</h1><p>创建结点，设置属性，插入孩子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">tag, props, children</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// ...</span></span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// 简化版mount</span></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">vnode, container</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用 vnode.el 存储dom元素，所以看到以前的vdom时，可以使用.el访问旧的真实dom树（与patch配合完成dom树的修改）</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> el = vnode.el = <span class="built_in">document</span>.createElement(vnode.tag)</span></span><br><span class="line"><span class="javascript">		<span class="comment">// props —— 假设只用考虑attrs</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (vnode.props) &#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vnode.props) &#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">const</span> value = vnode.props[key]</span></span><br><span class="line"><span class="javascript">				el.setAttribute(key, value)</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// children —— 假设孩子都是数组</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (vnode.children) &#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.children === <span class="string">&#x27;string&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">				el.textContent = vnode.children</span></span><br><span class="line"><span class="javascript">			&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">				vnode.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">					mount(child, el)</span></span><br><span class="line"><span class="javascript">				&#125;)</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		container.appendChild(el)</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> vdom = h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span> &#125;, [h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>)])</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	mount(vdom, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><p>页面已经完成一次渲染，h函数生成vdom；</p>
</li>
<li><p>在一个响应式属性被更新时，触发重新渲染，重新生成vdom；</p>
</li>
<li><p>现需要对两个vdom进行比较，依赖patch函数，使dom反映更新后的状态</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vdom = h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span> &#125;, [</span><br><span class="line">  h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vdom2 = h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;green&#x27;</span> &#125;, [</span><br><span class="line">  h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;changed!&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">patch(vdom, vdom2)</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.red</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.green</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: green;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">tag, props, children</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			tag,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			props,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			children,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">vnode, container</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">// ...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="keyword">const</span> vdom = h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span> &#125;, [h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>)])</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	mount(vdom, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>))</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">n1, n2</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">if</span> (n1.tag === n2.tag) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">const</span> el = (n2.el = n1.el)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="comment">// props</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">const</span> oldProps = n1.props || &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">const</span> newProps = n2.props || &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newProps) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">const</span> oldValue = oldProps[key]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">const</span> newValue = newProps[key]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">if</span> (newValue !== oldValue) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					el.setAttribute(key, newValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> oldProps) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">if</span> (!(key <span class="keyword">in</span> newProps)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					el.removeAttribute(key)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="comment">// children</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">const</span> oldChildren = n1.children</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">const</span> newChildren = n2.children</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="keyword">if</span> (<span class="keyword">typeof</span> newChildren === <span class="string">&#x27;string&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&#x27;string&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="keyword">if</span> (newChildren !== oldChildren) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						el.textContent = newChildren</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					el.textContent = newChildren</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&#x27;string&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					el.innerHTML = <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">					newChildren.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						mount(child, el)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="keyword">const</span> commonLength = <span class="built_in">Math</span>.min(oldChildren.length, newChildren.length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						patch(oldChildren[i], newChildren[i])</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="keyword">if</span> (newChildren.length &gt; oldChildren.length) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						newChildren.slice(oldChildren.length).forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">							mount(child, el)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						oldChildren.slice(oldChildren.length).forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">							el.removeChild(child.el)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vdom2 = h(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;green&#x27;</span> &#125;, [h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>)]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  patch(vdom, vdom2) <span class="comment">// 原本字体为红色，刷新后字体为绿色</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="补充-Vue3响应式原理"><a href="#补充-Vue3响应式原理" class="headerlink" title="(补充)Vue3响应式原理"></a>(补充)Vue3响应式原理</h1><h2 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h2><p>本节主要讲述存储不同effect的方法，但还不能让effect自动重新运行</p>
<h3 id="dep"><a href="#dep" class="headerlink" title="dep"></a>dep</h3><p>effect函数可以计算出我们想要得到的结果，track函数用于将各个effect保存在dep集合中，trigger函数用于重新调用每个effect函数，更新值从而实现响应式</p>
<p>这里是第一步，将所有effect放入一个集合，trigger更新时将重新触发所有effect，有可能某个effect和quantity是无关的，却要再触发一次，这显然可以改进</p>
<img src="https://img-blog.csdnimg.cn/b53d6b532d6a43d3bec431506b310838.png" style="zoom: 50%;">

<h3 id="depsMap"><a href="#depsMap" class="headerlink" title="depsMap"></a>depsMap</h3><p>第二步，创建一个depsMap，可以保存对应不同属性的依赖（即effect函数），当某个属性改变，trigger时只需要重新触发和它有关的effect函数即可。</p>
<p>比如此处的effect和quantity有关，假如还有一个effect可计算出quantity * 10，那么它也会保存在quantity对应的dep中，在trigger执行时更新</p>
<p>现在的问题是，我们可能有多个响应式对象，它们含有不同的属性（可能有同名的属性），因此在外边还需要一层targetMap</p>
<img src="https://img-blog.csdnimg.cn/fda2ae9103334832b0f8b2ca6fce3db7.png" style="zoom: 50%;">

<h3 id="targetMap"><a href="#targetMap" class="headerlink" title="targetMap"></a>targetMap</h3><blockquote>
<p>weakMap的键可以是一个对象（此处保存每一个响应式对象），值对应之前的depsMap</p>
</blockquote>
<p>targetMap存储了每个响应式对象的依赖，depsMap存储了每个属性的依赖，dep是一个effects集的依赖</p>
<img src="https://img-blog.csdnimg.cn/d070de8aa35a40c38fb4d181054528a1.png" style="zoom: 50%;">



<img src="https://img-blog.csdnimg.cn/2d9a165f4665477484fdde9c0a2a6380.png" style="zoom: 50%;">

<h2 id="Proxy-and-Reflect"><a href="#Proxy-and-Reflect" class="headerlink" title="Proxy and Reflect"></a>Proxy and Reflect</h2><p>使用ES6的proxy和reflect，读取属性时自动调用track，修改属性时自动调用trigger</p>
<blockquote>
<p>了解：receiver保证了，当我们的对象有继承自其他对象的值或函数时，this指针能正确地指向使用的对象，避免一些在vue2中的响应式警告</p>
</blockquote>
<img src="https://img-blog.csdnimg.cn/e1dc743aee5144d7aa8cc68e071b6ca0.png" style="zoom:50%;">

<h2 id="activeEffect-amp-ref"><a href="#activeEffect-amp-ref" class="headerlink" title="activeEffect &amp; ref"></a>activeEffect &amp; ref</h2><p>在之前的代码中，只要读取某个值，就会调用get中的track函数，遍历targetMap和各种依赖，这样会增加不必要的开销</p>
<p>activeEffect表示正在运行中的effect，只有当存在activeEffect时，再遍历targetMap</p>
<img src="https://img-blog.csdnimg.cn/b0258fe2e553471bbe85e00d2b51aa73.png" style="zoom: 67%;">



<p>视频作者说：“应当在effect中调用track函数”，我认为这样是正确的，在effect函数执行时，activeEffect不为null，此时调用track显得理所当然，但是代码中却没有体现对track的调用，activeEffect一下子又被设置为null。按照之前一节的理解，track在读取属性时被调用，在下方console.log时activeEffect已经变成null了，那track了个寂寞？</p>
<p>可能是这样的：在total = product.price * product.quantity 这一行，相当于已经访问了total，在此处调用了track，目前我只能这样理解了</p>
<img src="https://img-blog.csdnimg.cn/6923d4ea811a471bb87a96537010d121.png" style="zoom: 67%;">

]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>koa笔记</title>
    <url>/2021/07/19/20.koa%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>不同于express，koa需要安装对应的koa-router路由模块：<code>npm i koa-router </code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line"><span class="comment">// const Router = require(&#x27;koa-router&#x27;); const router = Router();</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ctx是上下文，包含req和res等信息</span></span><br><span class="line">router</span><br><span class="line">    .get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;	</span><br><span class="line">    ctx.body = <span class="string">&quot;首页&quot;</span>;	<span class="comment">// 返回数据</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">&quot;新闻&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes());	<span class="comment">// 启动路由</span></span><br><span class="line">app.use(router.allowedMethods());	<span class="comment">// 官方推荐加，最后调用，此时根据ctx.status设置response响应头</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at 127.0.0.1:3000&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="get传值"><a href="#get传值" class="headerlink" title="get传值"></a>get传值</h3><p>三种常用方式：</p>
<ul>
<li><p><code>ctx.query</code>：获取的是对象（最常用）</p>
</li>
<li><p><code>ctx.querystring</code>：获取的是字符串</p>
</li>
<li><p><code>ctx.request.url</code>：获取的是完整的url字符串</p>
</li>
</ul>
<p>例：当url为：<code>127.0.0.1:3000/?a=5&amp;b=7</code>时，三者的值分别为：</p>
<ul>
<li><code>&#123; a: &#39;5&#39;, b: &#39;7&#39; &#125;</code></li>
<li><code>a=5&amp;b=7</code></li>
<li><code>/?a=5&amp;b=7</code></li>
</ul>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>获取动态路由的传值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/news/:aid&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;	<span class="comment">//此处:aid的aid可以换名</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query);					<span class="comment">// &#123; c: &#x27;7&#x27; &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params);				<span class="comment">// &#123; aid: &#x27;a&#x27; &#125;</span></span><br><span class="line">    ctx.body = <span class="string">&quot;新闻&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次给动态路由传多值</span></span><br><span class="line">router.get(<span class="string">&#x27;/news/:aid/:cid&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query);					<span class="comment">// &#123; d: &#x27;8&#x27; &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params);				<span class="comment">// &#123; &#123; aid: &#x27;a&#x27;, cid: &#x27;b&#x27; &#125;: &#x27;a&#x27; &#125;</span></span><br><span class="line">    ctx.body = <span class="string">&quot;新闻&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例：当url为<code>http://127.0.0.1:3000/news/a?c=7</code>和<code>http://127.0.0.1:3000/news/a/b?d=8</code>时，结果如注释</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h3><p>匹配路由前进行一系列操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用级中间件</span></span><br><span class="line"><span class="comment">// 匹配路由之前打印日期</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  <span class="keyword">await</span> next(); <span class="comment">// 当前路由匹配完成以后继续向下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;	</span><br><span class="line">    ctx.body = <span class="string">&quot;首页&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">  .get(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">&quot;新闻&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>不同于express的顺序执行，无论app.use是放在router.get/post前边还是后边，都会优先执行</p>
<h3 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h3><p>匹配到一个路由后，继续向下匹配：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router</span><br><span class="line">  .get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;	</span><br><span class="line">    ctx.body = <span class="string">&quot;首页&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">  .get(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;新闻&#x27;</span>);</span><br><span class="line">    <span class="comment">// 若不加这一行，则控制台输出404后路由匹配结束，页面上显示404</span></span><br><span class="line">    <span class="keyword">await</span> next();	</span><br><span class="line">&#125;)</span><br><span class="line">  .get(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">&quot;新闻&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>先进入app.use，进入next()，匹配结束后，再回到next()下边这一行，如果匹配成功则什么也不做，匹配失败就显示404</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="keyword">if</span>(ctx.status === <span class="number">404</span>)&#123;</span><br><span class="line">        ctx.body = <span class="string">&quot;404 Not Found！&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><p>此处略，可以参考下方内容</p>
<h2 id="配置模板引擎"><a href="#配置模板引擎" class="headerlink" title="配置模板引擎"></a>配置模板引擎</h2><ol>
<li>安装koa-views和ejs：<code>npm i koa-views</code>，<code>npm i ejs</code></li>
<li>引入koa-views配置中间件</li>
<li>Koa中使用ejs</li>
</ol>
<p>app.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">&#x27;koa-views&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(views(<span class="string">&#x27;views&#x27;</span>, &#123;<span class="attr">extension</span>: <span class="string">&#x27;ejs&#x27;</span>&#125;));</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">      arr</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at 127.0.0.1:3000&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>index.ejs：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个ejs的模板引擎&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;% for(let i = 0; i &lt; arr.length; i++) &#123; %&gt;</span><br><span class="line">    &lt;li&gt;&lt;%= arr[i] %&gt;&lt;/li&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="post提交数据"><a href="#post提交数据" class="headerlink" title="post提交数据"></a>post提交数据</h2><ol>
<li>安装：<code>npm i koa-bodyparser</code></li>
<li>引入</li>
<li>app.use配置中间件</li>
<li>用ctx.request.body获取表单提交的数据</li>
</ol>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2>]]></content>
      <categories>
        <category>node</category>
        <category>koa</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>async、await</title>
    <url>/2021/07/07/19.async%E3%80%81await/</url>
    <content><![CDATA[<p>参考博客：<a href="https://segmentfault.com/a/1190000007535316">理解 JavaScript 的 async/await</a></p>
<p>async/await 是Generator的语法糖，异步编程更加直观且易于理解。</p>
<p>async/await 的优势在于处理 then 链。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传入参数 n，表示这个函数执行的时间（毫秒）</span></span><br><span class="line"><span class="comment">//执行的结果是 n + 200，这个值将用于下一步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// async前缀的作用：使函数返回Promise</span></span><br><span class="line"><span class="comment">// 该函数的返回值已经是Promise，故不需要加async前缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeLongTime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(n + <span class="number">200</span>), n);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step1 with <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step2 with <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step3 with <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise的写法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function doIt() &#123;</span></span><br><span class="line"><span class="comment">//   console.time(&quot;doIt&quot;);</span></span><br><span class="line"><span class="comment">//   const time1 = 300;</span></span><br><span class="line"><span class="comment">//   step1(time1)</span></span><br><span class="line"><span class="comment">//     .then(time2 =&gt; step2(time2))</span></span><br><span class="line"><span class="comment">//     .then(time3 =&gt; step3(time3))</span></span><br><span class="line"><span class="comment">//     .then(result =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       console.log(`result is $&#123;result&#125;`);</span></span><br><span class="line"><span class="comment">//       console.timeEnd(&quot;doIt&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// doIt();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// await后边加一个表达式</span></span><br><span class="line"><span class="comment">// 如果它等到的不是一个Promise对象，那await表达式的运算结果就是它等到的东西</span></span><br><span class="line"><span class="comment">// 如果它等到的是一个Promise对象，需要等待Promise对象resolve，然后得到resolve的值，作为await表达式的运算结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果Promise的状态为reject，使用try/catch来处理错误</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">&quot;doIt&quot;</span>);</span><br><span class="line">    	<span class="keyword">const</span> time1 = <span class="number">300</span>;</span><br><span class="line">    	<span class="keyword">const</span> time2 = <span class="keyword">await</span> step1(time1);  <span class="comment">// step1(time1)返回一个Promise，需拿到它resolve的值，再赋值给time2</span></span><br><span class="line">    	<span class="keyword">const</span> time3 = <span class="keyword">await</span> step2(time2);  <span class="comment">// step2(time1)返回一个Promise，需拿到它resolve的值，再赋值给time3</span></span><br><span class="line">    	<span class="keyword">const</span> result = <span class="keyword">await</span> step3(time3); <span class="comment">// step3(time1)返回一个Promise，需拿到它resolve的值，再赋值给result</span></span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">`result is <span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    	<span class="built_in">console</span>.timeEnd(<span class="string">&quot;doIt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doIt();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    step1 with 300</span></span><br><span class="line"><span class="comment">    step2 with 500</span></span><br><span class="line"><span class="comment">    step3 with 700</span></span><br><span class="line"><span class="comment">    result is 900</span></span><br><span class="line"><span class="comment">    doIt: 1502.43701171875 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>修改业务，每一个步骤都需要之前每个步骤的结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeLongTime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(n + <span class="number">200</span>), n);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step1 with <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step2 with <span class="subst">$&#123;m&#125;</span> and <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(m + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">k, m, n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`step3 with <span class="subst">$&#123;k&#125;</span>, <span class="subst">$&#123;m&#125;</span> and <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> takeLongTime(k + m + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">&quot;doIt&quot;</span>);</span><br><span class="line">    	<span class="keyword">const</span> time1 = <span class="number">300</span>;</span><br><span class="line">    	<span class="keyword">const</span> time2 = <span class="keyword">await</span> step1(time1);</span><br><span class="line">    	<span class="keyword">const</span> time3 = <span class="keyword">await</span> step2(time1, time2);</span><br><span class="line">    	<span class="keyword">const</span> result = <span class="keyword">await</span> step3(time1, time2, time3);</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">`result is <span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    	<span class="built_in">console</span>.timeEnd(<span class="string">&quot;doIt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doIt();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    step1 with 300</span></span><br><span class="line"><span class="comment">    step2 with 300 and 500 （300 + 200 == 500）</span></span><br><span class="line"><span class="comment">    step3 with 300, 500 and 1000 （300 + 500 + 200 == 1000）</span></span><br><span class="line"><span class="comment">    result is 2000 （300 + 500 + 1000 + 200 == 2000）</span></span><br><span class="line"><span class="comment">    doIt: 3764.155029296875 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>async/await</category>
      </categories>
      <tags>
        <tag>async/await</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise笔记</title>
    <url>/2021/07/07/18.Promise%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test01</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strFun</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(str);</span><br><span class="line">            anotherStr = <span class="string">&#x27;Good!&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> resolve(anotherStr); <span class="comment">// 异步操作成功时调用，将异步操作的结果作为参数传递出去</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;after resolve&#x27;</span>) </span><br><span class="line">            <span class="comment">// resolve只是修改状态，它之后的代码依然会执行，并且由于是同步代码，会在promise的then之前执行</span></span><br><span class="line">            <span class="comment">// 推荐在resolve前加return，这样确保resolve之后的代码不执行，避免意外</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(str + <span class="string">&#x27;: This string is too short!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> reject(<span class="string">&#x27;Bad!&#x27;</span>); <span class="comment">// 在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strFun(<span class="string">&#x27;Hello World!&#x27;</span>).then(<span class="function">(<span class="params">anotherStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(anotherStr); <span class="comment">// &#x27;Good!&#x27;</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">strFun(<span class="string">&#x27;Hi!&#x27;</span>).then(<span class="function">(<span class="params">anotherStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(anotherStr);</span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err); <span class="comment">// &#x27;Bad!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test02</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeOut</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;Done!&#x27;</span>); <span class="comment">// 第三个参数是向回调函数(第一个参数)中传入的参数</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeOut(<span class="number">2000</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//test03</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fail!&#x27;</span>))</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(p1); </span><br><span class="line">        <span class="comment">// 由于p2的resolve的参数是promise，导致自己的状态无效化</span></span><br><span class="line">        <span class="comment">// p2的真实状态由p1决定，而p1在3s后状态变为reject，因此p2的状态在3s后变为reject</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2</span><br><span class="line">    .then(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;) </span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err); <span class="comment">// Fail!</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 很普通的的链式调用</span></span><br><span class="line"><span class="keyword">const</span> strArr = [<span class="string">&#x27;How are you&#x27;</span>, <span class="string">&#x27;Fine thank you&#x27;</span>, <span class="string">&#x27;Nice to meet you&#x27;</span>]; </span><br><span class="line">strFun(strArr[<span class="number">0</span>]).then(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        strFun(strArr[<span class="number">1</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">).then(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        strFun(strArr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">114514</span>; <span class="comment">// 返回结果会作为参数，传入下一个回调函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">).then(</span><br><span class="line">    <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg); <span class="comment">// 114514</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，</span></span><br><span class="line"><span class="comment">// 有可能返回的还是一个Promise对象（即有异步操作），</span></span><br><span class="line"><span class="comment">// 这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于Promise.catch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。</span></span><br><span class="line"><span class="comment">// 也就是说，错误总是会被下一个catch语句捕获。</span></span><br><span class="line"><span class="comment">// 一般来说，不要在then()方法里面定义 Reject 状态的回调函数，总是使用catch方法。</span></span><br><span class="line"><span class="comment">// 原因：可以捕获前边then方法执行中的错误，也更接近同步的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test05</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// finally方法的回调函数不接受任何参数</span></span><br><span class="line"><span class="comment">// finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果</span></span><br><span class="line">strFun(<span class="string">&#x27;I love u, u love me, mexue ice-cream and tea~&#x27;</span>).finally(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">strFun(<span class="string">&#x27;lmao&#x27;</span>).finally(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>promise</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>《学习JS数据结构与算法》读书笔记</title>
    <url>/2021/07/06/17.%E3%80%8A%E5%AD%A6%E4%B9%A0JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>js</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js笔记</title>
    <url>/2021/06/18/16.Vue2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>黑马四小时入门视频笔记：</p>
<h2 id="基本-v-on"><a href="#基本-v-on" class="headerlink" title="基本/v-on"></a>基本/v-on</h2><p>从一个基本程序讲起，它的功能是：点击按钮增加数值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入Vue--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插值表达式--&gt;</span></span><br><span class="line">    &#123;&#123; message + &#x27;*&#x27; + num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNum&quot;</span>&gt;</span>增加number值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建Vue实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">// 设置挂载点，可以用多种CSS选择器，推荐ID选择器</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span>, <span class="comment">// 设置data，它的属性可以是对象或数组等</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123; <span class="comment">// 绑定的方法定义在methods属性中</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">addNum</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num++;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>备注：</p>
<ul>
<li>除了插值表达式（双大括号），还可以设置标签的<code>v-text</code>和<code>v-html</code>，如v-text=”message”，这样做会将标签内的内容覆盖</li>
<li>除了@，还可以用<code>v-on</code>来绑定方法，如<code>v-on:click=&quot;addNum&quot;</code></li>
<li>方法内部通过<code>this</code>关键字来访问定义在data中的数据</li>
</ul>
<h2 id="v-show-v-if-v-bind"><a href="#v-show-v-if-v-bind" class="headerlink" title="v-show/v-if/v-bind"></a>v-show/v-if/v-bind</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.hot</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">outline</span>: <span class="number">5px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleShow&quot;</span>&gt;</span>切换图片显示状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;tempUp&quot;</span>&gt;</span>升高温度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;tempDown&quot;</span>&gt;</span>降低温度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;&#x27;当前是&#x27;+ temp + &#x27;度&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc1&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title1&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;hot:temp&gt;30&#125;&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc2&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title2&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-bind设置属性，:src相当于v-bind:src，其余同理&gt;</span></span><br><span class="line"><span class="comment">	&lt;!--v-show和v-if设置图片是否可见，值为true时可见--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">imgSrc1</span>: <span class="string">&quot;./img/1.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">imgSrc2</span>: <span class="string">&quot;./img/2.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">title1</span>: <span class="string">&quot;神乃木&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">title2</span>: <span class="string">&quot;御冥&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">isShow</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">temp</span>: <span class="number">25</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">toggleShow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">tempUp</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.temp++;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">tempDown</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.temp--;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-show</code>和<code>v-if</code>区别：前者是设置display:none，而后者是直接修改dom树，由于前者的性能更优，在切换频繁时应使用前者</li>
<li><code>v-bind:src</code>可以简写成<code>:src</code>（其余同理）；设置类名时，可以用三目运算符，如：<code>:class=&quot;isActive?active&quot;</code>可以写成<code>:class=&quot;&#123;active:isActive&#125;&quot;</code></li>
</ul>
<h2 id="v-for-v-on-v-model"><a href="#v-for-v-on-v-model" class="headerlink" title="v-for/v-on/v-model"></a>v-for/v-on/v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入角色名：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      v-model可以便捷地设置和获取表单元素的值，</span></span><br><span class="line"><span class="comment">      input的value和newName动态双向绑定，即一方的值变化时另一方也会立即改变</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;newName&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@keyup.enter表示按下回车键，这里是对v-on的拓展--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in nameArr&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--v-for用于生成列表，in可以是数组...--&gt;</span></span><br><span class="line">      &#123;&#123;index + 1&#125;&#125;. 逆转裁判的角色：&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;item in person&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--数组内的元素是对象的情况--&gt;</span></span><br><span class="line">      神乃木前辈的爱好：&#123;&#123;item.hobby&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">nameArr</span>: [<span class="string">&quot;成步堂龙一&quot;</span>, <span class="string">&quot;御剑怜恃&quot;</span>, <span class="string">&quot;王泥喜法介&quot;</span>, <span class="string">&quot;夕月心音&quot;</span>, <span class="string">&quot;神乃木庄龙&quot;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">person</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;神乃木庄龙&quot;</span>, <span class="attr">job</span>: <span class="string">&quot;律师、检察官&quot;</span>, <span class="attr">hobby</span>: <span class="string">&quot;喝咖啡&quot;</span> &#125;],</span></span><br><span class="line"><span class="javascript">        <span class="attr">newName</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">insert</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.nameArr.push(<span class="built_in">this</span>.newName); <span class="comment">// 不要忘记this</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于数据的开发方式：无需关心dom，只要数据发生改变，页面内容就能响应式地发生改变</p>
<h2 id="vue和axios"><a href="#vue和axios" class="headerlink" title="vue和axios"></a>vue和axios</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; placeholder=&quot;请输入要获取的笑话条数&quot; oninput=&quot;if(value&gt;100)value=100&quot; v-model=&quot;jokeNum&quot; @keyup.enter=&quot;getJoke&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;getJoke&quot;&gt;获取笑话&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in jokes&quot;&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let app = new Vue(&#123;</span><br><span class="line">      el: &quot;#app&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        jokeNum: 1,</span><br><span class="line">        jokes: []</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getJoke: function () &#123;</span><br><span class="line">          // 发送axios的方式</span><br><span class="line">          axios.get(`https://autumnfish.cn/api/joke/list?num=$&#123;this.jokeNum&#125;`).then(</span><br><span class="line">            // 获取笑话的API</span><br><span class="line">            (res) =&gt; &#123;</span><br><span class="line">              this.jokes = res.data.jokes;  </span><br><span class="line">              // 老师说axios中的this和外部的this不一样，故要先that = this，此处用that</span><br><span class="line">              // 但是直接在axios内部用this也是可行的</span><br><span class="line">            &#125;,</span><br><span class="line">            (err) =&gt; &#123;</span><br><span class="line">              console.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h1><p>尚硅谷教程笔记：</p>
<h2 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h2><h3 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h3><p>创建一个Vue的实例对象，整个应用只需要一个Vue：</p>
<ul>
<li><code>el</code>(element)用于指定当前Vue实例为哪个容器服务</li>
<li><code>data</code>存储数据，为root容器提供数据，值为一个对象</li>
</ul>
<p>除了el，第二种挂载root的方法（后期挂载的方式，不常用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;宏福科技园综合楼&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.$mount(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>data的函数式写法：data是一个函数，返回数据对象（组件化编码必须使用函数式data）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;宏福科技园综合楼&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特别注意：</p>
<ol>
<li>若使用函数式data，Vue会帮我们调用data函数，Vue就会得到返回的数据对象，从而使用，此时this是Vue的实例对象</li>
<li>data不要写成箭头函数，否则this的指向为window</li>
</ol>
<blockquote>
<p>重要原则：由Vue所管理的函数，写成普通函数（watch中的函数，computed中的函数）；不由Vue管理的函数，写成箭头函数(ajax、定时器)</p>
</blockquote>
<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><ol>
<li>插值语法：<ul>
<li>功能：解析标签体内容</li>
<li>写法：，xxx会作为<code>表达式</code>解析，且可以自动读取到data中的属性</li>
</ul>
</li>
<li>指令语法：<ul>
<li>功能：解析标签（包括：标签属性、标签内容、绑定事件…）</li>
<li>举例：v-bind: …</li>
</ul>
</li>
</ol>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ul>
<li>单向数据绑定（v-bind）：data中的值传给input，但input的输入不影响data</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>双向数据绑定（v-model）：data中的值传给input，input的值传给data</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><ul>
<li>M：模型（Model）：对应data中的数据</li>
<li>V：视图（View）：模板代码</li>
<li>VM：视图模型（ViewModel）：Vue实例对象</li>
</ul>
<p><img src="/2021/06/18/16.Vue2%E7%AC%94%E8%AE%B0/1.jpg"></p>
<h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><ol>
<li><p>什么是数据代理？</p>
<p>（1）数据代理：配置对象data中的数据，会被收集到<code>vm._data</code>中，然后通过<code>Object.defineProperty</code>，让vm拥有data所有的值</p>
<p>（2）当访问vm的某值时，返回的是<code>_data</code>中同名属性的值</p>
<p>（3）当修改vm的某值时，修改的是<code>_data</code>中同名属性的值</p>
</li>
<li><p>数据代理的原理：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _data = &#123;<span class="attr">msg</span>:<span class="string">&quot;尚硅谷&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> vm = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(vm, <span class="string">&#x27;msg&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置vm.msg的同时也设置_data.msg</span></span><br><span class="line">        _data.msg = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 读取vm.msg时返回_data.msg</span></span><br><span class="line">        <span class="keyword">return</span> _data.msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>为什么要数据代理？</p>
<p>为了更方便地读取和修改data中的数据，不这样的话，就要使用vm._data.xxx</p>
</li>
<li><p>为什么要先收集到<code>_data</code>中，再代理出去？</p>
<p>为了监视数据更高效（Vue不知道程序员在data中有多少属性，数据代理时可以只用监视_data，而不用监视整个vm）</p>
</li>
</ol>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>触发事件的函数可以带括号，也可以不带</li>
<li>指定参数会覆盖event，如果需要event，传入<code>$event</code>，<strong>一般</strong>作为第一个参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@click=&quot;show1&quot;</span><br><span class="line"></span><br><span class="line">@click=&quot;show2($event, 666)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul>
<li><code>.prevent</code>：阻止默认行为，比如防止点击带href的a标签会跳转至其他页面</li>
<li><code>.stop</code>：阻止事件冒泡，比如防止点击子元素的事件，冒泡到点击父元素的事件</li>
<li><code>.once</code>：事件仅可触发一次</li>
<li><code>keyup.enter</code>：输入回车键，与之类似的还有<code>.esc</code>等，也可以<code>.按键编码</code>（未来版本可能废弃.编码）</li>
<li><code>.native</code>：该事件为原生DOM事件，不需要配置emit即可触发（见自定义事件）</li>
</ul>
<h4 id="表达式操作"><a href="#表达式操作" class="headerlink" title="表达式操作"></a>表达式操作</h4><p>如取反，不需要在methods中定义函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isHot = !isHot&quot;</span>&gt;</span></span><br><span class="line">    切换天气</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li><p>介绍：计算属性是由data中属性计算得来的新属性，vm里有计算属性，但_data中没有</p>
</li>
<li><p>执行时机：</p>
<ol>
<li>初始显示会执行一次，得到初始值去显示</li>
<li>当依赖的数据发生改变时，会被再次调用</li>
</ol>
</li>
<li><p>优势：与methods实现相比，内部有缓存机制，效率更高</p>
</li>
<li><p>备注：计算属性是用于直接读取使用的，不要加()</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;神乃木&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;庄龙&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><ul>
<li>介绍：监测数据改变的手段，数据发生改变后执行一些操作</li>
<li>执行时机：data中被监视的值改变时调用</li>
<li>两个参数：分别是新值和原值</li>
<li>备注：函数名要和被监视的变量名一致</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现和上方computed相同的功能</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">firstName</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">lastName</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.newValue</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>computed和watch的区别：</p>
<ol>
<li>只要是computed能完成的功能，watch都可以完成</li>
<li>watch可以进行异步操作（比如定时器1s后修改fullName），但computed不可以</li>
</ol>
<p>监视的完整版：（了解）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// 监测姓和名，此处只需要将其一改为完整写法：</span></span><br><span class="line">    <span class="attr">firstName</span>:&#123;</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>,	<span class="comment">// 该值为true则handler在初始化时就会调用一次，以后的调用看firstName的改变</span></span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;	<span class="comment">// 该函数必须叫handler</span></span><br><span class="line">            <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">lastName</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.newValue</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监视的第二种绑定方法（不常用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;firstName&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,	<span class="comment">// 该值为true则handler在初始化时就会调用一次，以后的调用看firstName的改变</span></span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;	<span class="comment">// 该函数必须叫handler</span></span><br><span class="line">        <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h3><p>class的写法（数组写法不常用，未列出）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--class的字符串写法，适用于：类名不确定，要动态获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;myStyle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--class的对象写法，适用于：类名确定，但不确定用不用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;classA:hasA, classB:hasB&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--class的三元表达式写法，使用情况同上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;hasA ? &#x27;classA&#x27; : &#x27;&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定style：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fontSize在data中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:size + &#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>v-show和v-if在入门处已经说得详细，下述总结：</p>
<ul>
<li>v-if（还有v-else-if和v-else）：<ul>
<li>适用于：切换频率很低的场景</li>
<li>特点：不展示的DOM结点直接被删除（触发回流重绘）</li>
</ul>
</li>
<li>v-show：<ul>
<li>适用于：切换频率很高的场景</li>
<li>特点：不展示的DOM结点没有被删除，仅仅用样式隐藏</li>
</ul>
</li>
<li>备注：使用v-if时，DOM结点可能无法获取到，而使用v-show一定可以获取到DOM结点</li>
</ul>
<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>标准写法需要加上key属性，key属性要求每一个元素都是不同的值</p>
<h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p>这里假设数组内每一个元素都是一个对象，每一个对象的id都不同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><p>括号内的key表示键名，由于对象不存在重复键名，故可以赋值给key属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><p>data表示字符，index是该字符在字符串内的序号，由于序号不会重复，故可以赋值给key属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(data, index) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h3><p>各种情况：</p>
<ul>
<li>若是<code>&lt;input type=&quot;text&quot;&gt;</code>，则v-model收集的是value值</li>
<li>若是<code>&lt;input type=&quot;radio&quot;&gt;</code>，则v-model收集的是value值</li>
<li>若是<code>&lt;input type=&quot;checkbox&quot;&gt;</code>：<ul>
<li>没有配置value属性：收集的是checked（布尔值）</li>
<li>配置value属性：<ul>
<li>v-model的初始值是非数组：收集的是checked</li>
<li>是数组：收集的是由value组成的数组</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般表单都不会写action，并去除提交刷新的默认事件，使用ajax提交--&gt;</span></span><br><span class="line">        账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别: 男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">        	  女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好：抽烟<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        	 喝酒<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        	 开车<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所属校区：<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        其他信息：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">            提交</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        userInfo&#123;</span><br><span class="line">        	<span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        	<span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        	<span class="attr">sex</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        	<span class="attr">hobby</span>: [],</span><br><span class="line">    		<span class="attr">city</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    		<span class="attr">other</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    		<span class="attr">agree</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="built_in">this</span>.userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>生命周期分为：</p>
<ul>
<li><p>挂载流程</p>
</li>
<li><p>更新&amp;销毁流程</p>
</li>
</ul>
<img src="/2021/06/18/16.Vue2%E7%AC%94%E8%AE%B0/2.jpg" style="zoom:67%;">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>分析生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>当前页面求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;death&quot;</span>&gt;</span>销毁<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//修改Vue的全局配置</span></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//关闭生产提示</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">sum</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&#x27;你点了+按钮&#x27;</span>);</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.sum += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">death</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$destroy();</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例数据代理前</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--beforeCreate--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.sum); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.add); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例数据代理完毕</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--created--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.sum); <span class="comment">// 0</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.add); <span class="comment">// function</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">				<span class="comment">// debugger;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例更新真实DOM之前(挂载前)</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--beforeMount--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				btn.innerText = <span class="string">&#x27;Hello&#x27;</span>; <span class="comment">// 最终对DOM的操作无效</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">const</span> h2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(h2);</span></span><br><span class="line"><span class="javascript">				<span class="comment">// debugger;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例更新完真实DOM了(挂载完毕)</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--mounted--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">const</span> h2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				btn.innerText = <span class="string">&#x27;Hello&#x27;</span>; <span class="comment">// 最终对DOM的操作有效</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(h2)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(btn);</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例将要更新页面</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--beforeUpdate--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.sum); <span class="comment">// sum为1，页面上为0</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// debugger;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例完成更新页面</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--updated--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.sum) <span class="comment">// sum为1，页面上也为1</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// debugger;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例销毁前</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--beforeDestroy--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.sum); <span class="comment">//可以获取</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.add); <span class="comment">//可以获取</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//vue实例销毁完毕</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;--destroyed--&#x27;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;移除完毕了所有数据的监视，不会再更新页面了&#x27;</span>);</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h3><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h4><p>步骤：</p>
<ol>
<li>在目标元素外包裹<code>&lt;transition name=&quot;xxx&quot;&gt;</code></li>
<li>编写样式：<ul>
<li>进入：<ul>
<li>进入起始点：xxx-enter</li>
<li>进入过程中：xxx-enter-active</li>
<li>进入结束点：xxx-enter-to</li>
</ul>
</li>
<li>离开：<ul>
<li>离开起始点：xxx-leave</li>
<li>离开过程中：xxx-leave-active</li>
<li>离开结束点：xxx-leave-to</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.picture</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*离开的起点，即进入的终点*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo-leave-to</span>, <span class="selector-class">.demo-enter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*离开的终点，即进入的起点*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo-leave-to</span>, <span class="selector-class">.demo-enter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.2</span>) <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo-leave-active</span>, <span class="selector-class">.demo-enter-active</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: <span class="number">1s</span> all;</span></span><br><span class="line"><span class="css">        <span class="comment">/*如果离开时和进入时的transition时间不一样，就得分开写*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picture&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果是多个元素的过渡，使用<code>&lt;transition-group&gt;</code>，key值必写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;...&quot;</span>&gt;</span>元素1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;...&quot;</span>&gt;</span>元素2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>和过渡类似：</p>
<ol>
<li>基本编码<ul>
<li>在目标元素外包裹<code>&lt;transition name=&quot;xxx&quot;&gt;</code></li>
<li>编写：进入动画、离开动画的样式</li>
</ul>
</li>
<li>类名规范：<ul>
<li>进入动画样式：xxx-enter-active</li>
<li>离开动画样式：xxx-leave-active</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.picture</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="comment">/*reverse表示动画反向播放*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo-enter-active</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">animation</span>: test <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">animation</span>: test <span class="number">1s</span> reverse;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> test&#123;</span></span><br><span class="line"><span class="css">        ...</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picture&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote>
<p>Vue2只有全局过滤器，它可以影响多个Vue实例</p>
</blockquote>
<p>现有需求：将时间戳转化成格式化的时间，使用第三方库<code>moment.js</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/moment.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤器的固定语法 ↓ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;time | dateFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;time | dateFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&#x27;YYYY-MM-DD HH:mm:ss&#x27;是moment.js要求传入的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当有任何日期想要格式化时，就可以调用dateFormater</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;dateFormater&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, str=<span class="string">&#x27;YYYY-MM-DD&#x27;</span></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="comment">// value是要进行格式化的时间戳，str是dateFormater的参数，如果不传参，str为默认值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> moment(value).format(str);	<span class="comment">// moment由moment.js提供</span></span></span><br><span class="line"><span class="javascript">    &#125;) </span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>: <span class="built_in">Date</span>.now()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>分为：全局指令和局部指令，全局指令可以在多个vm中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-upper-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>全局指令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;upper-text&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>&#123; <span class="comment">// 不需写 v-</span></span><br><span class="line">    <span class="comment">// 该指令的作用是：将字符变为大写</span></span><br><span class="line">    el.innerText = binding.value.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>: danmosama</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>局部指令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>: danmosama</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">directives</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;upper-text&#x27;</span>(el, binding)&#123;	<span class="comment">// 此处为简写</span></span><br><span class="line">            el.innerText = binding.value.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><p>感性认识：插件是一个添加指令、属性…的集合</p>
<p>先创建一个plugin.js文件，作为插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插件的定义：是一个包含install方法的对象</span></span><br><span class="line"><span class="keyword">let</span> plugin = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">plugin.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, options</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加一个全局指令</span></span><br><span class="line">    Vue.directive(<span class="string">&#x27;upper-text&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>&#123;</span><br><span class="line">    	el.innerText = binding.value.toUpperCase();</span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给Vue自身添加属性和方法</span></span><br><span class="line">    Vue.proName = <span class="string">&#x27;管理系统&#x27;</span>;</span><br><span class="line">    Vue.version = <span class="string">&#x27;V1.0.1&#x27;</span>;</span><br><span class="line">    Vue.showInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Some info&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给Vue原型上添加数据，供vm使用</span></span><br><span class="line">    Vue.prototype.$method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;This method is prepared for vm&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再调用该插件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugin.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Vue会帮我们调用插件里的install方法</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.use(<span class="string">&#x27;plugin&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 其他操作（包括创建vm），可以console.log插件添加的属性，使用插件的方法等</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="组件和脚手架"><a href="#组件和脚手架" class="headerlink" title="组件和脚手架"></a>组件和脚手架</h2><h3 id="非单文件"><a href="#非单文件" class="headerlink" title="非单文件"></a>非单文件</h3><p>在真正开发中，不使用非单文件，它仅用于教学和理解原理，单文件的笔记结合了脚手架</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>组件：包含页面局部功能的代码和资源的集合，规范要求组件的首字母大写</p>
<p>组件使用的基本流程：</p>
<ul>
<li>定义组件</li>
<li>注册组件<ul>
<li>全局注册：Vue.component(‘组件名, 组件’)</li>
<li>局部注册</li>
</ul>
</li>
<li>写组件标签</li>
</ul>
<p>定义组件：</p>
<ol>
<li><p>定义方式：使用Vue.extend(options)创建</p>
</li>
<li><p>School的本质是一个构造函数，以后写<code>&lt;School/&gt;</code>，Vue帮我们去new School</p>
</li>
<li><p>options参数是配置对象，它几乎和new Vue时的options一样，区别如下：</p>
<ul>
<li><p>不能写el指定容器：</p>
<pre><code>原因：所有组件实例最终要被一个vm所管理，vm中会指定好el
</code></pre>
</li>
<li><p>data必须写成函数</p>
<pre><code>原因：确保多个组件中的数据互不干扰（如果写成对象，考虑引用数据类型的特性，修改一个vm的data会影响另一个）
</code></pre>
</li>
<li><p>组件的模板结构要配置在template属性中：</p>
<ul>
<li>值为html字符串，推荐模板字符串</li>
<li>模板的结构<strong>必须只有一个根标签</strong>（在外边套div）</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以写开始标签和结束标签，也可以写自结束标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处并非标准写法，一般最外边是app标签--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">School</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">School</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义组件</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> School = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">			&lt;h2&gt;学校名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">		`</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局注册</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;School&#x27;</span>, School); </span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义vm，去管理所有的组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root1&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root2&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示局部注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        School <span class="comment">// 触发简写形式，School:School可以直接写School</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="VueComponent的原理"><a href="#VueComponent的原理" class="headerlink" title="VueComponent的原理"></a>VueComponent的原理</h4><p><code>VueComponent</code>继承了Vue，所以Vue.prototype上的属性和方法，vc都能看见</p>
<p>接上节例，我们说School是一个构造函数，如果console.log(new School())，输出在控制台的不是 <code>School ()</code>，而是 <code>VueComponent()</code>，由此分析出对应的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = &#123;</span><br><span class="line">    <span class="function"><span class="title">extend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">VueComponent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> VueComponent;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">const</span> School = Vue.extend(&#123;...&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> s = <span class="keyword">new</span> School();</span><br><span class="line">    <span class="built_in">console</span>.log(s);	<span class="comment">// VueComponent()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件的data函数、以及methods中配置的函数中的this都是vc</p>
<h3 id="创建脚手架"><a href="#创建脚手架" class="headerlink" title="创建脚手架"></a>创建脚手架</h3><p>运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">vue create 项目名（英文）</span><br><span class="line"></span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>得到的项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git（自动执行了init、add、commit操作）</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">  favicon.co</span><br><span class="line">  index.html</span><br><span class="line">src</span><br><span class="line">  assets（可在此处配置静态资源）</span><br><span class="line">  components</span><br><span class="line">      HelloWorld.vue</span><br><span class="line">  App.vue</span><br><span class="line">  main.js</span><br><span class="line">  .gitignore</span><br><span class="line">  bable.config.js</span><br><span class="line">  package.json</span><br><span class="line">  README.md</span><br><span class="line">  yarn.lock</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>

<h3 id="分析脚手架"><a href="#分析脚手架" class="headerlink" title="分析脚手架"></a>分析脚手架</h3><h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure>

<p>此处的title和package.json文件挂钩</p>
<h4 id="render与h函数"><a href="#render与h函数" class="headerlink" title="render与h函数"></a>render与h函数</h4><p>模板解析器：解析template</p>
<p>在<code>import Vue from &#39;vue&#39;</code>时，由于没有指定路径，根据package.json，默认引入的是vue.runtime.common.js，该文件的优点是体积很小，但是不含模板解析器，此时默认情况下只能解析.vue文件中的模板，不能解析main.js中的模板</p>
<p>于是官方提供了render函数，它可以调用模板解析器，使得main.js中的模板可以被解析，并且有了render后，我们无需再在index.html中的div中写<code>&lt;app/&gt;</code></p>
<h3 id="单文件案例"><a href="#单文件案例" class="headerlink" title="单文件案例"></a>单文件案例</h3><p>Hello.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 配置组件模板结构 */</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;学校名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 class=&quot;info&quot;&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;	</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">/* 配置组件数据、交互等 */</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 暴露组件配置，并没有创建组件(因为没有调用Vue.extend)</span><br><span class="line">  export default &#123;</span><br><span class="line">    // data中存放组件所需数据</span><br><span class="line">    data()&#123; </span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;DanmoSAMA&#x27;,</span><br><span class="line">        address:&#x27;湖北省-武汉市-洪山区-华中科技大学&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;	</span><br><span class="line"></span><br><span class="line">/* 配置组件样式 */</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .title&#123;</span><br><span class="line">    color: orange;</span><br><span class="line">  &#125;</span><br><span class="line">  .info&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 配置组件的结构 */</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 class=&quot;like&quot;&gt;我最喜欢的角色是：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;Hello/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">/* 配置组件数据、交互、事件等等*/</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入Hello组件</span><br><span class="line">  import Hello from &#x27;./components/Hello&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;Soryuu Kaminogi&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;Hello&#125;,  // 注册组件</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .like&#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 通过ES6模块化语法引入vue</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>minxin（混入）：</p>
<ul>
<li><p>功能：把多个组件共用的配置提取成一个混入对象</p>
</li>
<li><p>使用：如下</p>
</li>
<li><p>原则：如果混合中的属性和方法与组件中data和methods有冲突，组件优先；如果是生命周期钩子有冲突，则同时应用</p>
</li>
</ul>
<p>定义混合：</p>
<p>mixin.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">public</span>:<span class="string">&#x27;public data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引入混合：</p>
<ul>
<li><p>局部引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;淡漠&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mixins</span>:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用到所有vm和vc上</span></span><br><span class="line">Vue.mixin(mixin);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p><code>scope</code>写在style标签里，作用：让样式在局部生效，防止冲突</p>
<p>但是，App组件里定义的样式一般用于所有的组件，因此App组件的style标签不写scope</p>
<h3 id="书写less"><a href="#书写less" class="headerlink" title="书写less"></a>书写less</h3><p>如果要在style中写less：</p>
<ul>
<li>lang=”less”</li>
<li>下载less-loader，不能下载最新版本，因为新版本用webpack5：<ul>
<li><code>npm view less-loader versions</code>查看版本</li>
<li><code>npm i less-loader@7</code>下载7.3版本的less-loader</li>
</ul>
</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote>
<p><code>ref</code>被用来给元素或子组件注册引用（reference）信息。引用信息将会注册在父组件的<code>$refs</code>对象上。如果在普通的DOM元素上使用，引用指向的就是DOM元素；如果用在子组件上，引用就指向组件实例。</p>
</blockquote>
<p>ref的使用：</p>
<ul>
<li>标签中直接编写 <code>ref=&quot;xxx&quot;</code></li>
<li>通过<code>this.$refs.xxx</code>获取</li>
<li>备注：<ul>
<li>若给html内置标签打ref，则获取到的是真实DOM结点</li>
<li>若给组件标签打ref，则获取到的是组件实例对象vc</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;button ref=&quot;btn&quot; @click=&quot;showData&quot;&gt;</span><br><span class="line">        	点我获取焦点</span><br><span class="line">    	&lt;/button&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;input type=&quot;text&quot; ref=&quot;keyWord&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;School ref=&quot;xuexiao&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import School from &#x27;./components/School&#x27;</span><br><span class="line">    </span><br><span class="line">    export default&#123;</span><br><span class="line">    components:&#123;School&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showData()&#123;</span><br><span class="line">                console.log(this.$refs.btn.innerText);</span><br><span class="line">                this.$refs.keyWord.focus();		 // 获取input的焦点</span><br><span class="line">                console.log(this.$refs.xuexiao); // vc</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>props是properties的简称，它可以限制类型、控制必要性和指定默认值等，<strong>一般用于父组件向子组件传递数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;h2 class=&quot;name&quot;&gt;学校名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2 class=&quot;address&quot;&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h4&gt;接收到的名字是&#123;&#123;username&#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                name: &#x27;尚硅谷&#x27;,</span><br><span class="line">                address: &#x27;北京&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:&#123;</span><br><span class="line">            userName:&#123; 			  	 // 此处不能和data中的属性名重复，因为它也会成为vc的一个属性</span><br><span class="line">                type: String,     	 // 类型</span><br><span class="line">                required: true,   	 // 必要性</span><br><span class="line">                default: &#x27;DanmoSAMA&#x27; // 默认值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果在School.vue里这样写了，则它的外壳App.vue必须绑定userName属性，否则会在控制台警告，并将默认值填入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;!--此处必须绑定userName属性--&gt;</span><br><span class="line">    	&lt;School :userName=&quot;userName&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import School form &#x27;./components/School&#x27;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                userName: &#x27;淡漠&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;School&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>以上为完整写法，精简写法（更常用）如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 次完整写法</span><br><span class="line">props:&#123;</span><br><span class="line">  userName:String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最精简写法</span><br><span class="line">props:[&#x27;userName&#x27;]</span><br></pre></td></tr></table></figure>

<h3 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h3><ol>
<li><p><code>组件自定义事件</code>是一种组件间通信的方式，适用于<strong>子组件=&gt;父组件</strong></p>
</li>
<li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件，事件的回调在A中（<strong>回调在父组件中</strong>）</p>
</li>
<li><p>绑定自定义事件：</p>
<ol>
<li><p>方法一：在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或<code>&lt;Demo v-on:atguigu=&quot;test&quot;&gt;</code></p>
</li>
<li><p>方法二：在父组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Demo ref=&quot;demo&quot;/&gt;</span><br><span class="line">  ...</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.$refs.xxx.$on(&#x27;atguigu&#x27;, this.test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>若想让自定义事件只能触发一次，可以用<code>once</code>修饰符或<code>$once</code>方法</p>
</li>
</ol>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;, 数据)</code></p>
</li>
<li><p>解绑自定义事件：<code>this.$off(&#39;atguigu&#39;)</code></p>
</li>
<li><p>组件上绑定原生DOM事件：使用<code>native</code>修饰符</p>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;, 回调)</code>绑定自定义事件时，回调<strong>要么配置在methods中，要么用箭头函数</strong>，否则this指向会出问题</p>
</li>
</ol>
<h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>可以实现任意组件间的通信。</p>
<p>在main.js中安装全局事件总线：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>（此处原理暂不深究，先记住这种方法）</p>
<p><code>$bus</code>是一个东西，它不属于任何组件，A、B是兄弟组件，当A想收到数据时，在A组件里给<code>$bus</code>绑定一个自定义事件demo，此时demo的回调就留在A组件里。B想给A传数据时，触发<code>$bus</code>上的demo自定义事件，并带一些数据过去，则<code>$bus</code>上的demo事件被触发后，触发A中的回调，就把数据带过去了。</p>
<h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><p>pubsub-js是一个库，在vue中更推荐使用全局事件总线方式</p>
<ol>
<li><p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>
</li>
<li><p>使用步骤：</p>
<ol>
<li><p>安装pubsub：<code>npm i pubsub-js</code></p>
</li>
<li><p>引入：<code>import pubsub from &#39;pubsub-js&#39;</code></p>
</li>
<li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">  demo(data)&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.pid = pubsub.subscribe(&#x27;xxx&#x27;, this.demo);	// 订阅消息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p>
</li>
<li><p>应在beforeDestory钩子中，用<code>pubsub.unsubsribe(pid)</code>去取消订阅</p>
</li>
</ol>
</li>
</ol>
<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>场景：前端的端口号为8080，服务器的端口号为5000，前端向服务器发送Ajax请求时存在跨域问题，导致前端拿不到服务器返回的数据，故需要配置代理，前端请求代理，代理请求服务器（代理服务器的端口和前端相同，由于同源策略是Ajax的，服务器之间不存在跨域问题，便可以从8080端口的服务器拿到数据）</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在vue.config.js中添加如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可</li>
<li>缺点：不能配置多个代理，不能灵活控制请求是否走代理</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，才会把该请求转发给服务器（优先匹配前端资源）</li>
</ol>
<h4 id="方法二（推荐）"><a href="#方法二（推荐）" class="headerlink" title="方法二（推荐）"></a>方法二（推荐）</h4><p>编写vue.config.js配置具体代理规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">//入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span>, <span class="comment">//关闭语法检查</span></span><br><span class="line">  <span class="comment">//开启代理服务器（方式二）</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/atguigu&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">        <span class="comment">// 前端向代理请求时要加/atguigu，代理向服务器请求时会去掉/atguigu</span></span><br><span class="line">    <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/atguigu&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// ws: true, //用于支持websocket</span></span><br><span class="line">        <span class="comment">// changeOrigin: true //用于控制请求头中的host值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/demo&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/demo&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        <span class="comment">// changeOrigin: true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>作用：让父组件可以向子组件指定位置插入HTML结构，也是一种组件间通信的方式，适用于<strong>父组件=&gt;子组件</strong></p>
<h4 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">子组件：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;!--定义插槽--&gt;</span><br><span class="line">        &lt;slot&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>template标签的好处是不会被解析到页面上，<code>slot</code>和<code>v-slot</code>属性都只能写在template标签上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">        &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">子组件：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;!--定义插槽--&gt;</span><br><span class="line">        &lt;slot name=&quot;center&quot;&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">        &lt;!--生成的是ul列表--&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;game in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;game&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">        &lt;!--生成的是h4标题--&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;game in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;game&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">子组件：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;!--定义插槽--&gt;</span><br><span class="line">        &lt;slot :games=&quot;games&quot;&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">        name:&#x27;Category&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                games: [&#x27;game1&#x27;, &#x27;game2&#x27;, &#x27;game3&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol>
<li><p>概念：</p>
<p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进入集中式管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信</p>
</li>
<li><p>何时使用：多个组件需要<strong>共享</strong>数据时</p>
</li>
</ol>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><img src="/2021/06/18/16.Vue2%E7%AC%94%E8%AE%B0/3.png" style="zoom: 40%;">

<p>vuex由<code>Actions</code>、<code>Mutations</code>、<code>State</code>组成，这三者被<code>Store</code>管理着</p>
<ul>
<li>vc向Actions传动作和数据，Actions把它们交给Mutations，由它执行并更改State，渲染后影响vc（页面）</li>
<li>如果不进行发ajax等操作，vc可以直接调用commit，跳过Actions</li>
<li>类比：vc是客人，Actions是服务员，Mutations是后厨，State是做好的菜；dispatch即客人告诉服务员需求，commit即服务员把需求告诉后厨，mutate即后厨制作，render即把菜传给客人</li>
</ul>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><blockquote>
<p>npm i vuex</p>
</blockquote>
<ol>
<li><p>创建文件：<code>src/store/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions对象，响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备mutations对象，修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备state对象，保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在main.js中创建vm时传入store配置项</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​      </p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol>
<li><p>初始化数据，配置<code>actions</code>、<code>mutations</code>，操作文件<code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">// 响应组件中加的动作</span></span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">context, value</span>)</span>&#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;ADD&#x27;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">// 执行加</span></span><br><span class="line">    <span class="function"><span class="title">ADD</span>(<span class="params">state, value</span>)</span>&#123;</span><br><span class="line">        state.sum += value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    statesj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p>
</li>
<li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;actions中的方法名&#39;, 数据)</code>或<code>$store.commit(&#39;mutations中的方法名&#39;, 数据)</code></p>
</li>
</ol>
<blockquote>
<p>若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch，直接编写commit</p>
</blockquote>
<h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><ol>
<li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  ......</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><blockquote>
<p>map方法不是必需的，它们可以对代码作出一些优化</p>
</blockquote>
<ol>
<li><p>mapState方法：用于帮助我们映射<code>state</code>中的数据为计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">    ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>, <span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性：sum、school、subject（数组写法）    </span></span><br><span class="line">    ...mapState([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;school&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapGetters方法：用于帮助我们映射<code>getters</code>中的数据为计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...mapState(&#123;<span class="attr">bigSum</span>: <span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性：bigSum（数组写法）    </span></span><br><span class="line">    ...mapState([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapActions方法：用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">// 靠mapActions生成、increamentOdd、increamentWait（对象形式）</span></span><br><span class="line">    ...mapActions(&#123;<span class="attr">increamentOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>, <span class="attr">increamentWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 靠mapActions生成、increamentOdd、increamentWait（数组形式）</span></span><br><span class="line">    ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapMutatios方法：用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">// 靠mapActions生成、increamentOdd、increamentWait（对象形式）</span></span><br><span class="line">    ...mapMutations(&#123;<span class="attr">increamentOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>, <span class="attr">increamentWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 靠mapActions生成、increamentOdd、increamentWait（数组形式）</span></span><br><span class="line">    ...mapMutations([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><ol>
<li>定义：是vue的一个插件库，专门实现SPA应用（单页Web应用）</li>
<li>路由：<ul>
<li>一个路由就是一组映射关系（key - value），key为路径，value为function或component</li>
<li>路由分为前端路由（浏览器路径改变时改变显示的组件）和后端路由</li>
</ul>
</li>
</ol>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><ol>
<li><p>安装：<code>npm i vue-router</code></p>
</li>
<li><p>应用插件：<code>Vue.use(VueRouter)</code></p>
</li>
<li><p>编写router配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>: About</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li>
<li><p>实现切换（active-class可配置高亮样式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>指定展示位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h4><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储自己的路由信息</li>
<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li>
</ol>
<h3 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h3><ol>
<li><p>配置路由规则：使用children配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Home,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,	<span class="comment">// 此处不要写&#x27;/&#x27;</span></span><br><span class="line">                <span class="attr">component</span>: News</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: Message</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>跳转（写完整路径）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol>
<li><p>传递参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--跳转并携带query参数，to的字符串写法--&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--跳转并携带query参数，to的对象写法--&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">         path: &#x27;/home/message/detail&#x27;,</span><br><span class="line">         query:&#123;</span><br><span class="line">     		id: 666,</span><br><span class="line">         	title: &#x27;你好&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;&quot;         </span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.title</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ol>
<li><p>作用：可以简化路由的跳转</p>
</li>
<li><p>使用：</p>
<ol>
<li><p>给路由命名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Demo,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                name: <span class="string">&#x27;hello&#x27;</span>,	<span class="comment">// 命名</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: Hello</span><br><span class="line">            ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>简化跳转：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前--&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">&lt;!--简化后--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">&lt;!--简化配合传递参数--&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">         name: &#x27;hello&#x27;,</span><br><span class="line">         query:&#123;</span><br><span class="line">     		id: 666,</span><br><span class="line">         	title: &#x27;你好&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;&quot;         </span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><p>params参数不带<code>a=b&amp;c=d</code>的形式，用<code>/</code>分隔</p>
<ol>
<li><p>配置路由，声明接收params参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span> <span class="comment">// 使用占位符声明接收params参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>传递参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">&lt;!--简化配合传递参数--&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">         name: &#x27;hello&#x27;,</span><br><span class="line">         params:&#123;</span><br><span class="line">     		id: 666,</span><br><span class="line">         	title: &#x27;你好&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;&quot;         </span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>接收参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h3><p>作用：让路由组件更方便地收到参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// props值为对象几乎不用</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 写法一：props值为布尔值，为true时把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 写法二：props值为函数，该函数返回的对象中，每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">    <span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">id</span>: route.query.id,</span><br><span class="line">            <span class="attr">title</span>: route.query.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="replace属性"><a href="#replace属性" class="headerlink" title="replace属性"></a>replace属性</h3><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：<code>push</code>和<code>replace</code>，前者追加历史记录，后者替换当前记录，默认为<code>push</code></li>
<li>开启replace模式：：<code>&lt;router-link replace ...&gt;&lt;/router-link&gt;</code></li>
</ol>
<h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ol>
<li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p>
</li>
<li><p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $router的两个API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: xxx,</span><br><span class="line">        <span class="attr">title</span>: xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: xxx,</span><br><span class="line">        <span class="attr">title</span>: xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">// 前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back()	<span class="comment">// 后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go() <span class="comment">// 可前进也可后退，传入一个正负数作为参数</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ol>
<li><p>作用：让不展示的路由组件保持挂载，不被销毁</p>
</li>
<li><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;News&#x27;, &#x27;Message&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="路由生命周期钩子"><a href="#路由生命周期钩子" class="headerlink" title="路由生命周期钩子"></a>路由生命周期钩子</h3><p>捕获路由组件的激活状态：</p>
<ol>
<li><code>activated</code>：路由组件被激活时触发</li>
<li><code>deactived</code>：路由组件失活时触发</li>
</ol>
<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>作用：对路由进行权限控制</p>
<p><code>meta</code>中可以存一些程序员想要保存的数据</p>
<h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;学校名错误，无权限查看！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="独享守卫"><a href="#独享守卫" class="headerlink" title="独享守卫"></a>独享守卫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:News,</span><br><span class="line">  <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;独享路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要鉴权</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h4><p>注意事项：</p>
<ul>
<li>不要把离开守卫理解成后置守卫</li>
<li>“通过路由规则”：如果一上来组件就展示，不会触发</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入守卫，通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouterEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 离开守卫，通过路由规则，离开时该组件时被调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两种工作模式"><a href="#两种工作模式" class="headerlink" title="两种工作模式"></a>两种工作模式</h3><ol>
<li>url的hash：#及其后面的内容</li>
<li>hash值不会包含在HTTP请求中，即：hash值不会带给服务器</li>
<li>hash模式：<ol>
<li>地址中永远带着#号，不美观</li>
<li>若以后将地址通过第三方手机App分享，若App校验严格，则地址会被标记为不合法</li>
<li>兼容性较好</li>
</ol>
</li>
<li>history模式：<ol>
<li>地址美观</li>
<li>兼容性略差</li>
<li>应用部署上线时需要后端支持，解决刷新页面服务端404的问题</li>
</ol>
</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="关闭生产提示"><a href="#关闭生产提示" class="headerlink" title="关闭生产提示"></a>关闭生产提示</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><p>浏览器F12-&gt;Application可以查看本地存储</p>
<ol>
<li><p>存储内容大小一般支持5MB左右</p>
</li>
<li><p>浏览器端通过 <code>Window.sessionStorage</code>和 <code>Window.localStorage</code>属性实现本地存储</p>
</li>
<li><p>API：</p>
<ol>
<li><p><code>xxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></p>
<p>将键值对添加到存储中，如果键名存在，则更新其对应值</p>
<p>如果value不是字符串则浏览器会使用<code>toString()</code>转换，如果传对象，这样会破坏其内部结构</p>
<p>使用<code>JSON.stringify()</code>，将其转换为字符串同时不破坏内部结构</p>
</li>
<li><p><code>xxxStorage.getItem(&#39;key&#39;)</code></p>
<p>返回键名对应的值，不存在则返回null</p>
<p>获取对象时，使用<code>JSON.parse()</code></p>
</li>
<li><p><code>xxxStorage.getItem(&#39;key&#39;)</code></p>
<p>删除该键名和键值</p>
</li>
<li><p><code>xxxStorage.getItem(&#39;key&#39;)</code></p>
<p>清空存储中的所有数据</p>
</li>
</ol>
</li>
<li><p>备注：</p>
<ol>
<li>SessionStorage存储的内容随着浏览器窗口关闭而消失</li>
<li>LocalStorage存储的内容需要手动清除（调API或清空缓存）</li>
<li><code>JSON.parse(null)</code>的结果是null</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript笔记</title>
    <url>/2021/06/18/15.TS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>如果在声明变量时赋值，TS可以自动对变量进行<code>类型检测</code>。</p>
<h2 id="any和unknown"><a href="#any和unknown" class="headerlink" title="any和unknown"></a>any和unknown</h2><p>都表示不确定的类型，但unknown比any更安全：</p>
<ul>
<li>any类型的变量可以直接赋给其他值，被赋的变量也会关闭类型检测</li>
<li>unknown类型的变量不能直接被赋给其他变量</li>
</ul>
<p>如果要把它赋值给其他变量，使用断言：</p>
<h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// never 表示永远不会返回结果</span><br><span class="line">function fn(): never&#123;</span><br><span class="line">    throw new Error(&#x27;报错了！&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>对于字面量，如果直接用<code>let a: 1</code>这样的形式，则相当于常量。</p>
<p>使用联合类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用 | 来连接多个类型（联合类型）</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">boolean</span> | <span class="built_in">string</span>;</span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span></span><br><span class="line"><span class="comment">// 语法：&#123;属性名:属性值,属性名:属性值&#125;</span></span><br><span class="line"><span class="comment">// 在属性名后边加上?，表示属性是可选的</span></span><br><span class="line"><span class="keyword">let</span> b: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span>&#125;;</span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [propName: string]: any 表示任意类型的属性</span></span><br><span class="line"><span class="comment">// propName可以改成其他字符串</span></span><br><span class="line"><span class="keyword">let</span> c: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;;</span><br><span class="line">c = &#123;<span class="attr">name</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;表示同时</span></span><br><span class="line"><span class="keyword">let</span> j: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="comment">// j = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的类型声明：</p>
<ul>
<li><pre><code>  类型[]
</code></pre>
</li>
<li><pre><code>  Array&lt;类型&gt;
</code></pre>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// string[] 表示字符串数组</span></span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">string</span>[];</span><br><span class="line">e = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// number[] 表示数值数组</span></span><br><span class="line"><span class="keyword">let</span> f: <span class="built_in">number</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组，元组就是固定长度的数组</p>
<ul>
<li><pre><code>  语法：[类型, 类型, 类型]
</code></pre>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> h: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">h = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>];</span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Gender&#123;</span><br><span class="line">    Male,</span><br><span class="line">    Female</span><br><span class="line">&#125; <span class="comment">// 实际上Male值为0，Female值为1；也可以自己赋不同值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: Gender&#125;;</span><br><span class="line">i = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">gender</span>: Gender.Male <span class="comment">// &#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型的别名</span></span><br><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> k: myType;</span><br><span class="line"><span class="keyword">let</span> l: myType;</span><br><span class="line"><span class="keyword">let</span> m: myType;</span><br><span class="line"></span><br><span class="line">k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h1 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h1><p>监视模式的开启：<code>tsc -w</code>，include的部分都会被监视，文件修改后自动编译</p>
<h2 id="include、exclude"><a href="#include、exclude" class="headerlink" title="include、exclude"></a>include、exclude</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span></span><br><span class="line"><span class="comment">    &quot;include&quot; 用来指定哪些ts文件需要被编译</span></span><br><span class="line"><span class="comment">      路径：** 表示任意目录</span></span><br><span class="line"><span class="comment">            * 表示任意文件</span></span><br><span class="line"><span class="comment">    &quot;exclude&quot; 不需要被编译的文件目录</span></span><br><span class="line"><span class="comment">        默认值：[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/**/*&quot;</span> </span><br><span class="line">    <span class="comment">//可以加逗号，继续写</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/hello/**/*&quot;</span> </span><br><span class="line">    <span class="comment">//一般不用写exclude</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h2 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// target 用来指定ts被编译为的ES的版本</span></span><br><span class="line">    <span class="comment">// &#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// module 指定要使用的模块化的规范</span></span><br><span class="line">    <span class="comment">// &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// lib用来指定项目中要使用的库</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;, &#x27;dom&#x27;, &#x27;dom.iterable&#x27;,&#x27;webworker&#x27;,&#x27;webworker.importscripts&#x27;,&#x27;webworker.iterable&#x27;,&#x27;scripthost&#x27;,&#x27;es2015.core&#x27;,&#x27;es2015.collection&#x27;,&#x27;es2015.generator&#x27;,&#x27;es2015.iterable&#x27;, &#x27;es2015.promise&#x27;,&#x27;es2015.proxy&#x27;,&#x27;es2015.reflect&#x27;, &#x27;es2015.symbol&#x27;, &#x27;es2015.symbol.wellknown&#x27;,&#x27;es2016.array.include&#x27;,&#x27;es2017.object&#x27;,&#x27;es2017.sharedmemory&#x27;, &#x27;es2017.string&#x27;, &#x27;es2017.intl&#x27;, &#x27;es2017.typedarrays&#x27;, &#x27;es2018.asyncgenerator&#x27;, &#x27;es2018.asynciterable&#x27;, &#x27;es2018.intl&#x27;, &#x27;es2018.promise&#x27;, &#x27;es2018.regexp&#x27;, &#x27;es2019.array&#x27;, &#x27;es2019.object&#x27;, &#x27;es2019.string&#x27;, &#x27;es2019.symbol&#x27;, &#x27;es2020.bigint&#x27;, &#x27;es2020.promise&#x27;, &#x27;es2020.sharedmemory&#x27;, &#x27;es2020.string&#x27;, &#x27;es2020.symbol.wellknown&#x27;, &#x27;es2020.intl&#x27;, &#x27;esnext.array&#x27;, &#x27;esnext.symbol&#x27;, &#x27;esnext.asynciterable&#x27;, &#x27;esnext.intl&#x27;, &#x27;esnext.bigint&#x27;, &#x27;esnext.string&#x27;, &#x27;esnext.promise&#x27;, &#x27;esnext.weakref&#x27;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;es6&quot;</span>, <span class="string">&quot;dom&quot;</span>] <span class="comment">//浏览器运行环境下，一般不作指定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// outDir 用来指定编译后文件所在的目录</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将代码合并为一个文件</span></span><br><span class="line">    <span class="comment">// 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/app.js&quot;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 是否对js文件进行编译，默认是false</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 是否检查js代码是否符合语法规范，默认是false</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 是否移除注释</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 不生成编译后的文件</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当有错误时不生成编译后的文件</span></span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有严格检查的总开关（设为true时，以下四项都会设为true）</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置编译后的文件是否使用严格模式，默认false</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许不明确类型的this</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 严格的检查空值</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TS与webpack"><a href="#TS与webpack" class="headerlink" title="TS与webpack"></a>TS与webpack</h1><ol>
<li><p><code>npm init -y</code> 生成package.json</p>
</li>
<li><p><code>npm i -D webpack webpack-cli typescript ts-loader html-webpack-plugin webpack-dev-server clean-webpack-plugin</code></p>
<ul>
<li><p>-D 表示开发依赖</p>
</li>
<li><p><code>webpack-cli</code>是webpack的命令行工具</p>
</li>
<li><p><code>html-webpack-plugin</code>用来自动创建html文件</p>
</li>
<li><p><code>webpack-dev-server</code>是webpack的开发服务器</p>
</li>
<li><p><code>clean-webpack-plugin</code>是webpack中的清除插件，每次构建都会先清除目录</p>
</li>
</ul>
</li>
<li><p>编写webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的文件</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">//设置html文件的标题</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;这是一个自定义的title&quot;</span></span><br><span class="line">            <span class="comment">//指定模板</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置引用模块，不设置.ts</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>配置tsconfig.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p>
</li>
</ol>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>用class关键字来定义一个类。</p>
<p>注：static和readonly都比较少用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   直接定义的属性是实例属性，需要通过对象的实例去访问：</span></span><br><span class="line"><span class="comment">*       const per = new Person();</span></span><br><span class="line"><span class="comment">*       per.name</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用static开头的属性是静态属性（类属性），可以直接通过类去访问</span></span><br><span class="line"><span class="comment">*       Person.age</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   readonly开头的属性表示一个只读的属性无法修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;孙悟空&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在属性前使用static关键字可以定义类属性（静态属性）</span></span><br><span class="line">    <span class="keyword">static</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果方法以static开头则方法就是类方法，直接通过类去调用</span></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hello 大家好！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.name + <span class="string">&#x27; &#x27;</span> +Person.age); <span class="comment">//孙悟空 18</span></span><br><span class="line">per.sayHello();</span><br><span class="line"><span class="comment">// Person.sayHello();</span></span><br></pre></td></tr></table></figure>

<h2 id="构造函数、this"><a href="#构造函数、this" class="headerlink" title="构造函数、this"></a>构造函数、this</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor 被称为构造函数</span></span><br><span class="line">    <span class="comment">//  构造函数会在对象创建时调用</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> dog2 = <span class="keyword">new</span> Dog(<span class="string">&#x27;小白&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">dog2.bark();</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>OCP（Open Close Principle ）原则：对变更关闭，对扩展开放。</p>
<p>即：可以添加新的属性和方法，但不要修改他人已有的类。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123; <span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在跑~~~`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;汪汪汪汪！&#x27;</span>); <span class="comment">// 方法重写</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;喵喵喵喵！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;咪咪&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line">dog.sayHello();</span><br><span class="line">dog.run();</span><br><span class="line"><span class="built_in">console</span>.log(cat);</span><br><span class="line">cat.sayHello();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>在类的方法中，super就表示当前类的父类。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span></span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;汪汪汪汪！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">dog.sayHello();</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类就是专门用来被继承的类，以abstract开头</p>
<ul>
<li><pre><code>  抽象类不能用来创建对象
</code></pre>
</li>
<li><pre><code>  抽象类中可以添加抽象方法
</code></pre>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法使用 abstract开头，没有方法体</span></span><br><span class="line">    <span class="comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span></span><br><span class="line">    <span class="keyword">abstract</span> sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;汪汪汪汪！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;喵喵喵喵！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>);</span><br><span class="line">dog.sayHello();</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口用来定义一个类结构，用来定义一个类中应该包含哪些属性和方法，同时接口也可以当成类型声明去使用</p>
<h3 id="interface和type"><a href="#interface和type" class="headerlink" title="interface和type"></a>interface和type</h3><p>二者都可以当作类型声明来使用，不同点：</p>
<ul>
<li>可以声明相同名称的interface，ts会把它们加在一起；而声明相同名称的type会报错。</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> myInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> myInterface &#123;</span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj: myInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myType = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj_: myType = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口与类"><a href="#接口与类" class="headerlink" title="接口与类"></a>接口与类</h3><ul>
<li>接口可以在定义类的时候去限制类的结构</li>
<li>接口中的所有的属性都不能有实际的值</li>
<li>接口只定义对象的结构，而不考虑实际值</li>
<li>在接口中所有的方法都是抽象方法</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> myInter&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义类时，可以使类去实现一个接口（使类满足接口的要求）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="title">implements</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好~~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h2><p>目前现在属性是在对象中设置的，属性可以被任意修改，这导致对象中的数据变得不安全，为了避免这种现象，需要对属性进行封装。</p>
<h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><p>TS可以在属性前添加属性的修饰符</p>
<ul>
<li>  public 修饰的属性可以在任意位置访问（修改） 默认值</li>
<li>  private 私有属性，私有属性只能在类内部进行访问（修改），通过在类中添加方法使得私有属性可以被外部访问</li>
<li>  protected 受保护的属性，只能在当前类和当前类的子类中访问（修改）</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> num: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">num: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.num); <span class="comment">// protected修饰符：在子类中可以访问num</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="number">123</span>);</span><br><span class="line">b.num = <span class="number">321</span>; <span class="comment">// 报错，不能在外部修改num属性</span></span><br></pre></td></tr></table></figure>

<h3 id="get、set"><a href="#get、set" class="headerlink" title="get、set"></a>get、set</h3><p>get方法用来读取属性，set方法用来设置属性，它们被称为属性的存取器。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//此时_name和_age都是私有属性，想要访问/修改必须通过get和set</span></span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">        <span class="built_in">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">age</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="comment">// 使用属性存取器，增强代码健壮性</span></span><br><span class="line">        <span class="keyword">if</span>(value &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>._age = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用get/set后，还是可以用.的方式，符合我们的习惯</span></span><br><span class="line"></span><br><span class="line">per.name = <span class="string">&#x27;猪八戒&#x27;</span>;</span><br><span class="line">per.age = -<span class="number">33</span>; <span class="comment">// 不满足value &gt;=0，修改不会成功</span></span><br></pre></td></tr></table></figure>

<h3 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h3><p>这两种写法是等价的：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="comment">// 可以直接将属性定义在构造函数中</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在定义函数或类时，如果遇到类型不明确就可以使用泛型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="keyword">let</span> result = fn(<span class="number">10</span>);  <span class="comment">// 不指定泛型，TS可以自动对类型进行推断</span></span><br><span class="line"><span class="keyword">let</span> result2 = fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 指定泛型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型可以同时指定多个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">a: T, b: K</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">fn2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">123</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Inter&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T extends Inter 表示泛型T必须是Inter实现类（子类）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Inter</span>&gt;(<span class="params">a: T</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: T;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: T</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> MyClass&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>Some ideas</title>
    <url>/2021/06/15/14.Some%20ideas/</url>
    <content><![CDATA[<h1 id="长远计划"><a href="#长远计划" class="headerlink" title="长远计划"></a>长远计划</h1><ul>
<li>网页游戏/微信小程序游戏开发</li>
<li>APP开发</li>
</ul>
<h1 id="近期计划"><a href="#近期计划" class="headerlink" title="近期计划"></a>近期计划</h1><h2 id="补充技术"><a href="#补充技术" class="headerlink" title="补充技术"></a>补充技术</h2><ul>
<li>TypeScript</li>
<li>ES6没学完的部分</li>
<li>webpack</li>
<li>Vue</li>
<li>flutter</li>
<li>Nginx</li>
<li>Axios</li>
<li>打通Git</li>
<li>系统学习Github的使用</li>
<li>熟悉node（npm）</li>
<li>Linux（未来学习）</li>
</ul>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul>
<li>完善Lofter，登录/搜索/细节完善/部署上线</li>
<li>完善cMind，修改UI/更多功能</li>
<li>尝试把cMind变成套壳APP，而非只是网页</li>
</ul>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ul>
<li>阅读《你不知道的JS》</li>
<li>阅读《学习JS数据结构和算法》</li>
<li>阅读《JS设计模式和开发实践》</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>完成洛谷题目，数据结构进阶</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>视频制作教程笔记(影视飓风)</title>
    <url>/2021/06/05/13.%E8%A7%86%E9%A2%91%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0(%E5%BD%B1%E8%A7%86%E9%A3%93%E9%A3%8E)/</url>
    <content><![CDATA[<p>AV25783076：高画质的背后——视频的封装与编码</p>
<p>AV20450727：超级转场的核心——变速 ⭐️</p>
<p>AV18747023：Pr和Ae的无缝衔接大法</p>
<p>AV7301488：小技巧：Pr被低估的10个快捷键</p>
<p>AV7855737：小技巧：LUTS ⭐️</p>
<p>AV7045442：Premiere小技巧：秘传技</p>
<p>AV6936344：无缝转场与轨道蒙版 ⭐️</p>
<p>AV6746166：小技巧：超级转场的制作 ⭐️</p>
<h1 id="视频的封装与编码"><a href="#视频的封装与编码" class="headerlink" title="视频的封装与编码"></a>视频的封装与编码</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>编码分为：剪辑编码、输出编码、拍摄编码</p>
</li>
<li><p>mov、mp4是封装格式（format），不是编码</p>
</li>
<li><p>常见编码有H.264（帧间编码）和Prores（帧内编码）</p>
</li>
</ul>
<h2 id="帧内-帧间编码的对比"><a href="#帧内-帧间编码的对比" class="headerlink" title="帧内/帧间编码的对比"></a>帧内/帧间编码的对比</h2><h3 id="帧内编码"><a href="#帧内编码" class="headerlink" title="帧内编码"></a>帧内编码</h3><p>特点：针对每一帧的画面，进行单独的分析，就好比压缩一张照片。</p>
<p>优点：</p>
<ul>
<li>电脑在回放的时候比较轻松。</li>
</ul>
<p>缺点：</p>
<ul>
<li>能压缩的大小有限，体积会受到限制（比如说背景没有变化的时候，每一针都会被记录一次，产生了数据上的冗余）。</li>
</ul>
<h3 id="帧间编码"><a href="#帧间编码" class="headerlink" title="帧间编码"></a>帧间编码</h3><p>特点：记录两张完整的画面，只记录中间像素产生的变化，在后期解码时再重新运算出中间的帧，恢复出当时画面。</p>
<p>优点：</p>
<ul>
<li>有效压缩了素材体积。</li>
</ul>
<p>缺点：</p>
<ul>
<li>大了电脑的处理压力。</li>
</ul>
<h2 id="代理和输出编码"><a href="#代理和输出编码" class="headerlink" title="代理和输出编码"></a>代理和输出编码</h2><p>假如相机记录了4k的画面，又正好是帧间编码， 电脑又不够强大，应该选择使用<code>代理</code>，从而可以重新编码出一个分辨率更低，帧内编码的视频文件，使得在剪辑时更加流畅，剪辑完之后可以把它替换成原素材做进一步的处理（以后讲）。</p>
<p>剪辑完成之后，需要输出编码，这直接影响了上传到网上的视频质量，<strong>最佳的网络传播的编码，应该是h264编码，MP4封装。</strong></p>
<h2 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h2><p>码率也会影响画面和文件大小，编码决定了这个大小之下保留着最好的图像。</p>
<p>码率分为<code>恒定码率</code>和<code>可变码率</code>，通常可变码率会更实用一些，因为编码器会分析画面，之后对复杂的画面提供更多的码率，对于更容易压缩的地方，总会减少码率，这样即便文件大小不变，整体画质也会获得提升。</p>
<p>网络视频通常会在上传视频文件后进行二次压缩，可能造成码率降低，更低的码率很容易导致画面翻车，在面对具有大量随机移动的像素的时候，比如下雪或者灰尘，画面质量会迅速下降，因为编码器难以预测像素的运动，而码率不足以支撑画面。</p>
<p><strong>可以通过将视频压到B站限定的码率之下，来规避二次压缩，这样可以针对自己的视频进行编码上的优化，来获得更好的画质</strong>。</p>
<h1 id="变速"><a href="#变速" class="headerlink" title="变速"></a>变速</h1><h2 id="升格"><a href="#升格" class="headerlink" title="升格"></a>升格</h2><p><code>升格</code>是对慢动作比较专业的叫法，很多人直接把素材拖到时间线上，然后Ctrl+R，这个快捷键可以呼出速度控制窗口，然后可以输入25%或者50%，这样就可以实现升格，但是假如变速不是整除，就会遇到<code>跳帧</code>，所以应该使用<code>解释素材</code>来进行慢放，而不是纯粹的速度控制。</p>
<blockquote>
<p>升格：电影摄影中的一种技术手段，电影摄影拍摄标准是每秒24帧，也就是每秒拍摄24张，这样在放映时才能是正常速度的连续性画面，但为了实现一些简单的技巧，比如慢镜头效果，就要改变正常的拍摄速度，比如高于60帧/秒，这就是升格，放映效果就是慢动作。如果降低拍摄速度（低于24帧/秒），就是降格，放映效果就是快动作。</p>
</blockquote>
<blockquote>
<p>跳帧（frameskip），假如显示器设定的刷新率是80Hz，显卡以100FPS循环显示0-9数字，那么，在开始的0.1秒内，显卡显示了10个数字而显示器只刷新了8次，最终你看到的图像很可能是这样的：由于显示器刷新率跟不上游戏的FPS，只能舍弃一部分画面，这种现象表现在游戏里就是跳帧。</p>
</blockquote>
<h2 id="解释素材"><a href="#解释素材" class="headerlink" title="解释素材"></a>解释素材</h2><p>使用解释素材就是，在素材箱右键你的素材→Modify →Interpret footage，然后只需要把帧率修改成想要回放的帧率（比如25），这样就可以一次性处理所有的素材，实现慢放。</p>
<p>不存在整除的问题，因为可以理解成一卷胶片换了一个速度播放，就像以前升格一样，只是把每一帧映射到和之前不同的位置上。</p>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>当有了升格后，通常需要使用变速来强化效果，很多人喜欢直接切一刀画面，然后按一下R键，激活变速工具进行变速，没有渐变，所以看起来会很突兀。</p>
<p>正确做法是右键素材的fx标记，然后选择time remapping（<code>时间重映射</code>），然后按住Ctrl+ALT键，这个键可以帮助快速添加关键帧（任何需要添加关键帧的地方都可以使用这个快捷键），打上关键帧之后可以上下拖动这根线来实现变速，随后可以分开这两个小的关键帧，这样就会有一个具有渐变的变速。也可以拖动拉杆来进一步改变速度曲线，来实现最好的效果。</p>
<p>但是也有一个弊端，PR的速度上限是十倍，假如要突破这个限制，通常会在速度最大值处切一刀，然后单独按R键加速中间这一段，再把三段衔接起来。</p>
<p>如果想要流畅的过渡镜头与镜头之间的连接，就很需要这种变速，通常就是快对快、慢对慢，如果前一个素材的尾部被加速了，那么后一个素材的起始部分也应该要被加速，这样的话，动势就能够被匹配，画面就会比较连贯。</p>
<p><strong>此处需要练习</strong></p>
<h2 id="帧采样、帧混合、光流"><a href="#帧采样、帧混合、光流" class="headerlink" title="帧采样、帧混合、光流"></a>帧采样、帧混合、光流</h2><p>如果画面不连贯，或者想要实现比相机拍摄帧率更高的慢动作，就需要使用不同的时间控制，在Pr的速度窗口里，最下方有三个选项，帧采样、帧混合、光流。</p>
<ul>
<li>帧采样，只是把同一帧展现两次或者更多次。</li>
<li>帧混合也是重复出现同样的画面，但是添加了一点渐变和叠加，在视觉上稍微顺畅一点。</li>
<li>光流是真正意义上添加了新的帧，它通过预测两帧之间的像素运动轨迹，重新运算出了中间的针帧，画面总的帧数增加，比较流畅，但是必须要对比非常大的画面，才能够实现最佳的光流效果，否则会出现畸变。</li>
</ul>
<p>通常在加速之后，突然实现短暂的光流升格，可以实现非常酷炫的画面；帧混合一般用于快放，可以实现类似于动态模糊的感觉。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用带有渐变的变速，选择合适的时间控制模式，能够大大提升整体剪辑的节奏感，也能实现更好的转场，同时也要注意音频。</p>
]]></content>
      <categories>
        <category>视频制作</category>
      </categories>
      <tags>
        <tag>视频制作</tag>
      </tags>
  </entry>
  <entry>
    <title>未来の思考</title>
    <url>/2021/06/04/12.%E6%9C%AA%E6%9D%A5%E3%81%AE%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>考研与工作的抉择：<br><img src="/2021/06/04/12.%E6%9C%AA%E6%9D%A5%E3%81%AE%E6%80%9D%E8%80%83/1.jpg"></p>
<p>未来的打算：<br><img src="/2021/06/04/12.%E6%9C%AA%E6%9D%A5%E3%81%AE%E6%80%9D%E8%80%83/2.jpg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>json的crud</title>
    <url>/2021/05/30/10.json%E7%9A%84crud/</url>
    <content><![CDATA[<p>写：data是index.json中的所有数据，由于data一开始是二进制buffer，先用toString方法转化为字符串，再用JSON.parse转化为对象，把新的数据加入数组（allUser转为对象后是一个数组），把数组转化为字符串，再写入index.json文件</p>
<p>查：用ES6的find方法就好</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeJson</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">&#x27;./public/json/index.json&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> allUser = data.toString();</span><br><span class="line">    allUser = <span class="built_in">JSON</span>.parse(allUser);  <span class="comment">// 对空字符串不能使用该方法，所以初始情况下json文件不能为空</span></span><br><span class="line">    allUser.push(params);</span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(allUser);</span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./public/json/index.json&#x27;</span>, str, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;index.json：新增用户数据成功&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJson</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./public/json/index.json&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          rejected(err)</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> allUser = data.toString();</span><br><span class="line">        allUser = <span class="built_in">JSON</span>.parse(allUser);</span><br><span class="line">        user = allUser.find(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> user.id === str;</span><br><span class="line">        &#125;)</span><br><span class="line">        resolved(user);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前后端交互</category>
      </categories>
      <tags>
        <tag>前后端交互</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端交互初尝试</title>
    <url>/2021/05/30/09.%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%9D%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>一图归纳我到目前的理解程度：</p>
<p><img src="/2021/05/30/09.%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%9D%E5%B0%9D%E8%AF%95/1.jpg"></p>
<p>前端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">  xhr.send(<span class="string">`id=<span class="subst">$&#123;input3.value&#125;</span>&amp;password=<span class="subst">$&#123;input4.value&#125;</span>`</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(xhr.response);</span><br><span class="line">        <span class="keyword">if</span> (data.status == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="built_in">window</span>.location.href = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data.status == <span class="number">499</span>) &#123;</span><br><span class="line">          alert(<span class="string">&#x27;该用户已注册！&#x27;</span>);</span><br><span class="line">          location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>后端：get请求页面资源，post处理ajax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">&#x27;./pc-views/login.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  findJson(req.body.id).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    <span class="keyword">if</span> (user === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      writeJson(req.body);</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="number">499</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;user already registered&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前后端交互</category>
      </categories>
      <tags>
        <tag>前后端交互</tag>
      </tags>
  </entry>
  <entry>
    <title>原生ajax的req.body为空</title>
    <url>/2021/05/30/08.%E5%8E%9F%E7%94%9Fajax%E7%9A%84req.body%E4%B8%BA%E7%A9%BA/</url>
    <content><![CDATA[<p>一开始的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userjson = &#123;</span><br><span class="line">     <span class="comment">// 这里的数据格式不对</span></span><br><span class="line">    <span class="string">&quot;id&quot;</span>: input3.value,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: input4.value</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">  xhr.send(userjson);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        <span class="comment">//之后要根据不同的response进行不同的操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要修改两个地方：</p>
<ul>
<li>请求头</li>
<li>数据格式</li>
</ul>
<p>修改后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">  xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">  <span class="comment">// 修改请求头（没有深入理解）</span></span><br><span class="line">    </span><br><span class="line">  xhr.send(<span class="string">`id=<span class="subst">$&#123;input3.value&#125;</span>&amp;password=<span class="subst">$&#123;input4.value&#125;</span>`</span>);	</span><br><span class="line">  <span class="comment">// 在不配置的情况下，原生ajax发送post请求必须用这个数据格式：&#x27;a=xxx&amp;b=xxx&amp;c=xxx&#x27;</span></span><br><span class="line">    </span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(xhr.response);</span><br><span class="line">        <span class="keyword">if</span> (data.status == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data.status == <span class="number">499</span>) &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>返回回调函数中的变量</title>
    <url>/2021/05/30/07.%E8%BF%94%E5%9B%9E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJson</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// str参数表示用户的账号（手机号）</span></span><br><span class="line">  fs.readFile(<span class="string">&#x27;./public/json/index.json&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> allUser = data.toString();</span><br><span class="line">    allUser = <span class="built_in">JSON</span>.parse(allUser);</span><br><span class="line">    user = allUser.find(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id === str;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 我希望findJson函数可以把user给return出来</span></span><br><span class="line">    <span class="comment">// 直接在这里return是没用的</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>promise改进版：</p>
<p>findJson函数写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJson</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./public/json/index.json&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          rejected(err)</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> allUser = data.toString();</span><br><span class="line">        allUser = <span class="built_in">JSON</span>.parse(allUser);</span><br><span class="line">        user = allUser.find(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> user.id === str;</span><br><span class="line">        &#125;)</span><br><span class="line">        resolved(user);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调的时候可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">findJson(<span class="string">&#x27;11111111111&#x27;</span>).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(user)</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.error(err)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>传入参数’11111111111’后，函数已经在index.json中找到了user（或者是undefined），执行resolved(user)，可以把user传入接下来的函数，可以得到user，这样就相当于return出来了。</p>
<p>在我的函数中是这样写的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  findJson(req.body.id).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>promise</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端的rem布局</title>
    <url>/2021/05/28/06.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84rem%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> designWidth = <span class="number">375</span>;  		<span class="comment">// 设计稿宽度</span></span><br><span class="line"><span class="keyword">const</span> remPx = <span class="number">100</span>;               <span class="comment">// 在屏幕宽度375px的时候，设置根元素字体大小 100px</span></span><br><span class="line"><span class="keyword">let</span> scale = <span class="built_in">window</span>.innerWidth / designWidth; <span class="comment">// 计算当前屏幕的宽度与设计稿比例</span></span><br><span class="line"><span class="comment">// 根据屏幕宽度动态计算根元素的字体大小</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = scale * remPx + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>我为了保险，还在css中设置了根元素字体大小是100px，为了不因为字体太大而影响布局，我又设置了body字体大小为16px</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &gt; <span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，其他元素都用rem即可</p>
]]></content>
      <categories>
        <category>css</category>
        <category>自适应/响应式</category>
      </categories>
      <tags>
        <tag>自适应/响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>超出后省略剩余部分</title>
    <url>/2021/05/28/05.%E8%B6%85%E5%87%BA%E5%90%8E%E7%9C%81%E7%95%A5%E5%89%A9%E4%BD%99%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p>效果如下：</p>
<img src="/2021/05/28/05.%E8%B6%85%E5%87%BA%E5%90%8E%E7%9C%81%E7%95%A5%E5%89%A9%E4%BD%99%E9%83%A8%E5%88%86/1.jpg" style="zoom: 80%;">

<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>美国顶级传染病专家福奇称「不确信新冠病毒来自大自然，应该继续调查中国」，他为何突然改口？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>环球时报 ：我们都知道，自去年新冠肺炎疫情在美国暴发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2.02rem</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.16rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.04rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.14rem</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/*这三个需要一起用*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<img src="/2021/05/28/05.%E8%B6%85%E5%87%BA%E5%90%8E%E7%9C%81%E7%95%A5%E5%89%A9%E4%BD%99%E9%83%A8%E5%88%86/2.jpg" style="zoom:80%;">

]]></content>
      <categories>
        <category>css</category>
        <category>css特性</category>
      </categories>
      <tags>
        <tag>css实践</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端和PC端设置不同页面</title>
    <url>/2021/05/28/04.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%92%8CPC%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>在服务端添加以下代码（以express为例）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMachine</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> deviceAgent = req.headers[<span class="string">&quot;user-agent&quot;</span>].toLowerCase();</span><br><span class="line">  <span class="keyword">let</span> agentID = deviceAgent.match(<span class="regexp">/(iphone|ipod|ipad|android)/</span>);</span><br><span class="line">  <span class="keyword">if</span> (agentID) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 移动端</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// PC端</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> machine = getMachine(req);</span><br><span class="line">  <span class="keyword">if</span> (machine) &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./pe-views/index.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./pc-views/index.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>css</category>
        <category>自适应/响应式</category>
      </categories>
      <tags>
        <tag>自适应/响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>《你不知道的JS》读书笔记</title>
    <url>/2021/05/24/01.%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="最佳实践-原则"><a href="#最佳实践-原则" class="headerlink" title="最佳实践/原则"></a>最佳实践/原则</h1><ul>
<li>最小特权原则：在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的API设计</li>
<li>始终给函数表达式命名</li>
<li>对不再必要的全局变量或全局对象的属性，将其设置为null</li>
</ul>
<h1 id="上卷"><a href="#上卷" class="headerlink" title="上卷"></a>上卷</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><a href="https://blog.csdn.net/weixin_44659458/article/details/109356598">1.Javascript引擎，编译器，作用域三者之间的关系及LHS和RHS的区别</a><br><a href="https://www.jianshu.com/p/36f5bfc6b7e6/">2.聊聊JavaScript 编译器，引擎，作用域</a></p>
<h3 id="JS的编译"><a href="#JS的编译" class="headerlink" title="JS的编译"></a>JS的编译</h3><p>JS代码片在执行前要先编译：它的编译过程（通常）是在实际执行前进行的，而且也不会产生可移植的编译结果。</p>
<p>通常的编译步骤：</p>
<ol>
<li><code>分词与词法分析</code>：把输入的字符串分解为一些对编程语言有意义的代码块（词法单元）。</li>
<li><code>解析与语法分析</code>：将上一步的词法单元集合分析并最终转换为一个由元素逐级嵌套所组成的代表了程序语法结构的树，称为<code>抽象语法树</code>（Abstract Syntax Tree，AST）。</li>
<li><code>代码生成</code>：将上一步的AST转换为可执行代码。</li>
</ol>
<p>由于JS编译的特殊性，编译执行效率就要比一般静态语言敏感的多，故而也非常复杂。JS引擎在这一部分做了非常多的优化，一是针对语法分析和代码生成阶段进行优化（例如针对冗余元素进行优化等），目的是提高编译后的执行效率。二是针对编译过程进行优化（如JIT，延迟编译甚至重编译），目的是缩短编译过程，保证性能最佳。</p>
<h4 id="引擎、编译器和作用域"><a href="#引擎、编译器和作用域" class="headerlink" title="引擎、编译器和作用域"></a>引擎、编译器和作用域</h4><p>引擎：   负责整个Javascript程序的编译及执行过程。<br>编译器：负责语法分析及代码生成。<br>作用域：负责收集并维护有所有声明的标识符组成的一系列查询。</p>
<h4 id="var-a-1的编译过程"><a href="#var-a-1的编译过程" class="headerlink" title="var a=1的编译过程"></a>var a=1的编译过程</h4><ol>
<li><code>编译器</code>首先会将这段代码分解成词法单元，然后将词法单元解析成树结构。</li>
<li>对词法单元进行解析，解析到var a时，<code>编译器</code>会询问作用域是否存在一个变量名为a在同一作用域的集合中。如果有，编译器就忽略此声明。反之，在要求的作用域下声明变量。<br>第三步：生成可以运行代码(=1)给<code>引擎</code>执行，生成代码的这个过程就涉及到LHS和RHS两种赋值概念。<br>第四步：<code>引擎</code>运行编译器生成的代码时，会询问<code>作用域</code>是否存在在当前作用域下变量名为a的集合，如果没有，则在向上一级作用域查找变量名a。如果有，引擎则对变量名为a的集合赋值。</li>
</ol>
<h4 id="LHS和RHS"><a href="#LHS和RHS" class="headerlink" title="LHS和RHS"></a>LHS和RHS</h4><p>LHS（left-hand-side）：找到变量的容器本身，从而可以对其赋值<br>RHS（rigjt-hand-side）：查找某个变量的值</p>
<h3 id="函数作用域和块作用域"><a href="#函数作用域和块作用域" class="headerlink" title="函数作用域和块作用域"></a>函数作用域和块作用域</h3><h4 id="最小特权原则"><a href="#最小特权原则" class="headerlink" title="最小特权原则"></a>最小特权原则</h4><p>最小特权原则：在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的API设计</p>
<h4 id="规避冲突"><a href="#规避冲突" class="headerlink" title="规避冲突"></a>规避冲突</h4><h5 id="全局命名空间"><a href="#全局命名空间" class="headerlink" title="全局命名空间"></a>全局命名空间</h5><p>（可以实践）</p>
<p>在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会称为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域中。</p>
<h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><p>把IIFE当作函数调用并传递参数进去，可以改进代码风格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params"><span class="built_in">global</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);	<span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">global</span>.a);	<span class="comment">//2</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);	<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>好处：在代码风格上对全局对象的引用，变得比引用一个没有”全局”字样的变量更加清晰</p>
<p>倒置代码的运行顺序，将需要运行的函数放在第二位，在IIFE执行之后当作参数传递进去<br>（思考：这种方式或许能在某处派上用场）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params">def</span>) </span>&#123;</span><br><span class="line">  def(<span class="built_in">window</span>);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span> <span class="title">def</span>(<span class="params"><span class="built_in">global</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);	<span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">global</span>.a);	<span class="comment">//2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="with和try-catch（放着）"><a href="#with和try-catch（放着）" class="headerlink" title="with和try/catch（放着）"></a>with和try/catch（放着）</h4><h4 id="垃圾回收（补充）"><a href="#垃圾回收（补充）" class="headerlink" title="垃圾回收（补充）"></a>垃圾回收（补充）</h4><p><a href="https://segmentfault.com/a/1190000018605776">前端面试：谈谈 JS 垃圾回收机制</a><br><a href="https://www.yuque.com/bingyan-studio/isz3cs/up15ft">浏览器垃圾回收与内存管理</a></p>
<p>引用计数法由于循环引用问题而遭到废弃，此处只记录标记清理法：</p>
<ul>
<li>垃圾回收程序运行的时候，会标记内存中存储的所有变量</li>
<li>程序会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉，在此之后再被加上标记的变量就是待删除的，因为任何在上下文中的变量都访问不到它们了</li>
<li>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并回收它们的内存</li>
</ul>
<p>关于垃圾回收更详细的内容，请猛戳第二篇博文</p>
<h5 id="V8垃圾回收"><a href="#V8垃圾回收" class="headerlink" title="V8垃圾回收"></a>V8垃圾回收</h5><p>V8三种回收算法的比较：</p>
<table>
<thead>
<tr>
<th>回收算法</th>
<th>标记清除（Mark-Sweep）</th>
<th>标记整理</th>
<th>Scavange</th>
</tr>
</thead>
<tbody><tr>
<td>速度</td>
<td>中等</td>
<td>最慢</td>
<td>最快</td>
</tr>
<tr>
<td>空间开销</td>
<td>少（有碎片）</td>
<td>少（无碎片）</td>
<td>双倍空间（无碎片）</td>
</tr>
<tr>
<td>是否移动对象</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="模块（放着）"><a href="#模块（放着）" class="headerlink" title="模块（放着）"></a>模块（放着）</h4><p><a href="https://juejin.cn/post/6844903744518389768">前端模块化详解(完整版)</a><br><a href="https://blog.csdn.net/m0_51235736/article/details/116904464">前端模块化详解-笔记</a></p>
<h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><ul>
<li>词法作用域：在写代码或者说定义时确定，关注函数在何处声明</li>
<li>动态作用域：在运行时确定，关注函数在何处调用，作用域基于调用栈</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="往日结论"><a href="#往日结论" class="headerlink" title="往日结论"></a>往日结论</h3><p>先说以前记的结论：<br>1.以函数形式调用时，this永远都是window<br>2.以方法的形式调用时，this是调用方法的对象<br>3.以构造函数的形式调用时，this是新创建的那个对象<br>4.使用call和apply调用时，this是指定的那个对象</p>
<h3 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h3><ul>
<li>this在运行时进行绑定，它的上下文取决于函数调用时的各种条件。</li>
<li>当一个函数被调用时，会创建一个活动记录（执行上下文），它包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数等信息。this是执行上下文的一个属性，会在函数执行的过程中用到</li>
</ul>
<h3 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h3><p>显示强制绑定：一旦绑定this后不可以再通过call或apply修改this，比如ES添加的bind</p>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ol>
<li>new（构造调用）</li>
<li>显示绑定/硬绑定调用（call、apply/bind）</li>
<li>隐式绑定（对象的方法）</li>
<li>默认绑定（全局对象）</li>
</ol>
<p>对默认绑定来说，决定this绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式。如果函数体处于严格模式，this会被绑定到undefined，否则this会被绑定到全局对象。</p>
<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><h5 id="将null或undefined作为绑定对象"><a href="#将null或undefined作为绑定对象" class="headerlink" title="将null或undefined作为绑定对象"></a>将null或undefined作为绑定对象</h5><p>这些情况下，函数并不关心this是什么，传入的null仅仅作为占位值</p>
<p>情况一：展开数组；情况二：柯里化（减少返回的函数要求传入参数的个数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;, b:&quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组展开</span></span><br><span class="line">foo.apply(<span class="literal">null</span>, [<span class="number">2</span>,<span class="number">3</span>]);	<span class="comment">// a: 2, b: 3</span></span><br><span class="line"><span class="comment">//ES6中可以用...操作符来替代</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind进行柯里化</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.bind(<span class="literal">null</span>, <span class="number">2</span>);<span class="comment">//对bar，以后就只用传入b这个参数了</span></span><br><span class="line">bar(<span class="number">3</span>);	<span class="comment">// a: 2, b: 3</span></span><br></pre></td></tr></table></figure>

<p>以上的方式有一定安全隐患，并不推荐</p>
<h5 id="更安全的this"><a href="#更安全的this" class="headerlink" title="更安全的this"></a>更安全的this</h5><p>创建空的非委托对象，即DMZ（非军事区）对象</p>
<blockquote>
<p>Object.create(null)和{}很像，但是并不会创建Object.prototype这个委托，因此比{}更空。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;, b&quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我们的DMZ空对象，使用空集符号可以增强可读性</span></span><br><span class="line"><span class="keyword">let</span> Ø = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组展开</span></span><br><span class="line">foo.apply(Ø, [<span class="number">2</span>,<span class="number">3</span>]);	<span class="comment">// a: 2, b: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind进行柯里化</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.bind(Ø, <span class="number">2</span>);<span class="comment">//对bar，以后就只用传入b这个参数了</span></span><br><span class="line">bar(<span class="number">3</span>);	<span class="comment">// a: 2, b: 3</span></span><br></pre></td></tr></table></figure>
<h5 id="间接引用"><a href="#间接引用" class="headerlink" title="间接引用"></a>间接引用</h5><p>创建函数的间接引用时，调用该函数会应用默认绑定规则，间接引用最容易在赋值时发生</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo&#125;;</span><br><span class="line"><span class="keyword">let</span> p = &#123;<span class="attr">a</span>: <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">o.foo(); <span class="comment">// 3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值表达式p.foo = o.foo 的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo()或o.foo() </span></span><br></pre></td></tr></table></figure>
<h4 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h4><p>由以上可知，硬绑定后隐式绑定或显示绑定会无效</p>
<p>软绑定：可以给默认绑定指定一个全局对象和undefined以外的值，同时保留隐式绑定或者显式绑定修改this的能力</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这一段代码，暂时不能完全看懂</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Function</span>.prototype.softBind) &#123;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.softBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 捕获所有curried参数</span></span><br><span class="line">    <span class="keyword">let</span> curried = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(</span><br><span class="line">        (!<span class="built_in">this</span> || <span class="built_in">this</span> === (<span class="built_in">window</span> || <span class="built_in">global</span>)) ? </span><br><span class="line">          obj: <span class="built_in">this</span>,</span><br><span class="line">          curried.concat.apply(curried, <span class="built_in">arguments</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    bound.prototype = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>&#125;, obj2 = &#123;<span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>&#125;, obj3 = &#123;<span class="attr">name</span>: <span class="string">&quot;obj3&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> fooOBJ = foo.softBind(obj); <span class="comment">//软绑定，此时默认绑定了obj对象</span></span><br><span class="line">fooOBJ(); <span class="comment">// name: obj</span></span><br><span class="line">obj2.foo = foo.softBind(obj); <span class="comment">//软绑定，此时默认绑定了obj对象</span></span><br><span class="line">obj2.foo(); <span class="comment">// name: obj2 此时隐式绑定仍然生效</span></span><br><span class="line">fooOBJ.call(obj3); <span class="comment">// name: obj3 此时显示绑定仍然生效</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(obj2.foo, <span class="number">10</span>); <span class="comment">// name: obj</span></span><br></pre></td></tr></table></figure>

<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数不使用this的四种标准规则，而是根据外层作用域来决定this</p>
<p>箭头函数的绑定无法被修改，new也不行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo.call(obj1); </span><br><span class="line"><span class="comment">//foo的this被绑定为obj1，由this词法，bar的this受到foo的影响，也是obj1</span></span><br><span class="line">bar.call(obj2); <span class="comment">// 2， 一旦绑定，就不可被修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="中卷"><a href="#中卷" class="headerlink" title="中卷"></a>中卷</h1><h1 id="下卷"><a href="#下卷" class="headerlink" title="下卷"></a>下卷</h1>]]></content>
      <categories>
        <category>js</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/2021/05/24/02.webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="简介（P2）"><a href="#简介（P2）" class="headerlink" title="简介（P2）"></a>简介（P2）</h1><ul>
<li>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。</li>
<li>在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。</li>
<li>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</li>
</ul>
<h1 id="五个核心概念（P3）"><a href="#五个核心概念（P3）" class="headerlink" title="五个核心概念（P3）"></a>五个核心概念（P3）</h1><ul>
<li>Entry：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图</li>
<li>Output：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名</li>
<li>Loader： 让 webpack 能够去处理那些非JavaScript文件（翻译）</li>
<li>Plugins：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</li>
<li>Mode：指示 webpack 使用相应模式的配置，分为development和production</li>
</ul>
<h1 id="初体验（P4）"><a href="#初体验（P4）" class="headerlink" title="初体验（P4）"></a>初体验（P4）</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>新建文件夹：webpack初体验</li>
<li>npm init</li>
<li>npm i webpack webpack-cli -g</li>
<li>npm i webpack webpack-cli -D</li>
</ul>
<h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><h3 id="设置powershell"><a href="#设置powershell" class="headerlink" title="设置powershell"></a>设置powershell</h3><p>在执行以下指令以前，先设置powershell：<a href="https://blog.csdn.net/Piconjo/article/details/105716451">解决webpack : 无法加载文件 C:\Users\XXX\AppData\Roaming\npm\webpack.ps1因为在此系统上禁止运行脚本</a></p>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="https://img-blog.csdnimg.cn/20210509105459275.jpg#pic_center"></p>
<h3 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h3><ul>
<li>开发环境指令：webpack src/index.js -o ./build/built.js –mode=development<br>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成<br>浏览器能识别的语法。</li>
<li>生产环境指令：webpack src/index.js -o ./build/built.js –mode=production<br>功能：在开发配置功能上多一个功能，压缩代码。</li>
</ul>
<blockquote>
<p>备注：老师执行完开发环境指令后，在build目录下生成了built.js文件，而我执行完指令后，在build目录下生成了built.js目录，在该目录下有main.js文件，我猜测是配置方面的问题，因此我使用的指令是webpack src/index.js -o ./build –mode=development</p>
</blockquote>
<h3 id="实践（js）"><a href="#实践（js）" class="headerlink" title="实践（js）"></a>实践（js）</h3><p>index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>main.js(development):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;function add(x,y)&#123;\r\n  return x+y;\r\n&#125;\r\nconsole.log(add(1,2));\n\n//# sourceURL=webpack://webpack_test/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	__webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>]();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>main.js(production):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//这里和老师的也不一样</span></span><br></pre></td></tr></table></figure>
<p>无论是开发环境产生的main.js，还是生产环境产生的main.js，都可以运行（node或浏览器内）：<br><img src="https://img-blog.csdnimg.cn/20210509104516739.jpg#pic_center"></p>
<h3 id="实践（json）"><a href="#实践（json）" class="headerlink" title="实践（json）"></a>实践（json）</h3><p>data.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改index.js，再打包生成main.js文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&#x27;./data.json&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210509105129855.jpg#pic_center"><br>还是可以正常执行，说明webpack可以处理json</p>
<h1 id="打包样式资源（P5）"><a href="#打包样式资源（P5）" class="headerlink" title="打包样式资源（P5）"></a>打包样式资源（P5）</h1><p>注意，所有loader都需要用npm下载</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>webpack.config.js是webpack的配置文件</li>
<li>作用: 指示 webpack 干哪些活（当运行 webpack 指令时，会加载里面的配置）</li>
</ul>
<p>所有构建工具都是基于nodejs平台运行的，模块化默认采用commonjs。<br>（模块化分为ES6模块和commonjs）</p>
<p><img src="https://img-blog.csdnimg.cn/20210509163511553.jpg#pic_center"><br>配置文件和src目录在同一层级</p>
<p>配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法（不懂照做，以后深入学node）</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径（不懂照做）</span></span><br><span class="line">    <span class="attr">path</span>: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader的配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 详细loader配置</span></span><br><span class="line">      <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 匹配哪些文件（正则表达式）</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行（很重要）</span></span><br><span class="line">          <span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">          <span class="comment">// 需要下载 less-loader和less</span></span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins的配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 详细plugins的配置</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h2><p>此处以css为主，就不写less文件了</p>
<p>index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入样式资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><ul>
<li>首先通过entry加载index.js</li>
<li>加载index.js后，发现它依赖了index.css</li>
<li>现在有js和css两个资源，每个资源都要经过rules中的loader处理</li>
<li>根据test，css资源匹配，会使用其中的loader对css资源进行处理</li>
<li>loader从下往上进行处理</li>
<li>css-loader将css文件变成commonjs模块加载js中，里面内容是样式字符串，可以在输出的built.js文件中检查到</li>
<li>style-loader在页面打开时，创建style标签，将js中的样式资源插入style标签，再添加到head中生效</li>
</ul>
<p>想要查看效果，只需把built.js文件引入html即可</p>
<h1 id="打包html资源"><a href="#打包html资源" class="headerlink" title="打包html资源"></a>打包html资源</h1><p>重点是配置plugins，记得下载和引用plugins</p>
<p>下载：npm i html-webpack-plugin -D</p>
<p>config:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  loader: 1. 下载   2. 使用（配置loader）</span></span><br><span class="line"><span class="comment">  plugins: 1. 下载  2. 引入  3. 使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">// 需求：需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html:（没有引入index.js）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打包后，在build目录下生成了index.html:<br>（这里老师直接在终端输入webpack就可以打包了，我也不知道为什么）</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化详解笔记</title>
    <url>/2021/05/24/03.%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ES6模块化笔记"><a href="#ES6模块化笔记" class="headerlink" title="ES6模块化笔记"></a>ES6模块化笔记</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>esport命令用于规定模块的对外接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以教给你开发技能!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一暴露</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJob</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以帮助你找工作!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;school, findJob&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;ATGUIGU&#x27;</span>,</span><br><span class="line">    <span class="attr">change</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我们可以改变你!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于默认暴露，使用属性或方法时要用xxx.default.xxx</span></span><br></pre></td></tr></table></figure>



<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>import命令用于输入其他模块提供的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 通用的导入方式</span></span><br><span class="line">    <span class="comment">// 引入 m1.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m2.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m3.js </span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 解构赋值形式</span></span><br><span class="line">    <span class="keyword">import</span> &#123;school, teach&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123;school <span class="keyword">as</span> guigu, findJob&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;	<span class="comment">// as 起别名，防止重名冲突</span></span><br><span class="line">    <span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;	<span class="comment">// default 必须起别名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 简便形式  针对默认暴露</span></span><br><span class="line">    <span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(m3);	<span class="comment">// default: Object</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><p>设置app.js作为入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模块引入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">m1.teach();</span><br><span class="line">m2.findJob();</span><br><span class="line">m3.default.change();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改背景颜色为粉色</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>;<span class="comment">// const $ = require(&quot;jquery&quot;);</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在index.html中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/js/app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="模块化理解"><a href="#模块化理解" class="headerlink" title="模块化理解"></a>模块化理解</h1><h2 id="IIFE模式"><a href="#IIFE模式" class="headerlink" title="IIFE模式"></a>IIFE模式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">window</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = <span class="string">&#x27;www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//操作数据的函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//用于暴露有函数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`foo() <span class="subst">$&#123;data&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//用于暴露有函数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`bar() <span class="subst">$&#123;data&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">        otherFun() <span class="comment">//内部调用</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">otherFun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//内部私有的函数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;otherFun()&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//暴露行为</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.myModule = &#123;foo,bar&#125; <span class="comment">//ES6写法</span></span></span><br><span class="line"><span class="javascript">    &#125;)(<span class="built_in">window</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    myModule.foo()</span></span><br><span class="line"><span class="javascript">    myModule.bar()</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myModule.data) <span class="comment">//undefined 不能访问模块内部数据</span></span></span><br><span class="line"><span class="javascript">    myModule.data = <span class="string">&#x27;xxxx&#x27;</span> <span class="comment">//不是修改的模块内部的data</span></span></span><br><span class="line"><span class="javascript">    myModule.foo() <span class="comment">//没有改变</span></span></span><br><span class="line"><span class="javascript">    myModule.foo = <span class="string">&#x27;xxxx&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    myModule.foo(); <span class="comment">//myModule.foo is not a function</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>起初看到这一段代码，不理解为什么修改data后再调用myModule.foo()，输出没有改变，以下是心路历程：</p>
<ul>
<li>应该是在return中没有暴露data吧，我暴露试试</li>
<li>暴露data之后，console.log(myModule.data)可以正确输出了，不是undefined，但是myModule.foo()的输出依然没有改变，为什么？</li>
<li>修改myModule.data后再console.log没有问题，修改myModule.foo后也可以修改成功，为什么会出现上一条的状况？</li>
<li>因为IIFE只执行一次，执行的时候闭包（foo和bar）就已经确定好了对原始的data（即’<a href="http://www.baidu.com&/#39;%EF%BC%89%E7%9A%84%E5%BC%95%E7%94%A8%EF%BC%8C%E6%89%80%E4%BB%A5%E8%B0%83myModule.foo()%E5%B0%B1%E4%BC%9A%E8%BE%93%E5%87%BA%E5%8E%9Fdata%EF%BC%8C%E5%86%8D%E6%94%B9data%E4%B9%9F%E6%97%A0%E7%94%A8">www.baidu.com&#39;）的引用，所以调myModule.foo()就会输出原data，再改data也无用</a></li>
<li>以上的实践表明，使用该方法，由于闭包的特性，外部不可以直接修改内部的数据</li>
</ul>
<h1 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h1><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦把模块内的一个值赋值给一个变量，模块内部的变化就影响不到这个变量的值，除非写成一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//node1.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(counter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">counter</span>: counter,</span><br><span class="line">  <span class="attr">incCounter</span>: incCounter,</span><br><span class="line">  <span class="attr">printCounter</span>: printCounter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//node2.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">&#x27;./node1&#x27;</span>).counter;</span><br><span class="line"><span class="comment">// 从赋值之后开始 counter 变量的任何变化都与导出对象的 counter 属性毫无关系</span></span><br><span class="line"><span class="keyword">var</span> incCounter = <span class="built_in">require</span>(<span class="string">&#x27;./node1&#x27;</span>).incCounter;</span><br><span class="line"><span class="keyword">var</span> printCounter = <span class="built_in">require</span>(<span class="string">&#x27;./node1&#x27;</span>).printCounter;</span><br><span class="line"></span><br><span class="line">printCounter(); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(counter);  <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line">printCounter(); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
</search>
